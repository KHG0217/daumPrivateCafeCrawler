package com.tapacross.sns.crawler.daum.cafe.util;

import java.io.UnsupportedEncodingException;
import java.lang.Character.UnicodeBlock;
import java.util.Arrays;
import java.util.List;

public class CJKUtil {

	private final static String ksc5601_1987 = "가각간갇갈갉갊감갑값갓갔강갖갗같갚갛개객갠갤갬갭갯갰갱갸갹갼"
			+"걀걋걍걔걘걜거걱건걷걸걺검겁것겄겅겆겉겊겋게겐겔겜겝겟겠겡겨"
			+"격겪견겯결겸겹겻겼경곁계곈곌곕곗고곡곤곧골곪곬곯곰곱곳공곶과"
			+"곽관괄괆괌괍괏광괘괜괠괩괬괭괴괵괸괼굄굅굇굉교굔굘굡굣구국군"
			+"굳굴굵굶굻굼굽굿궁궂궈궉권궐궜궝궤궷귀귁귄귈귐귑귓규균귤그극"
			+"근귿글긁금급긋긍긔기긱긴긷길긺김깁깃깅깆깊까깍깎깐깔깖깜깝깟"
			+"깠깡깥깨깩깬깰깸깹깻깼깽꺄꺅꺌꺼꺽꺾껀껄껌껍껏껐껑께껙껜껨껫"
			+"껭껴껸껼꼇꼈꼍꼐꼬꼭꼰꼲꼴꼼꼽꼿꽁꽂꽃꽈꽉꽐꽜꽝꽤꽥꽹꾀꾄꾈"
			+"꾐꾑꾕꾜꾸꾹꾼꿀꿇꿈꿉꿋꿍꿎꿔꿜꿨꿩꿰꿱꿴꿸뀀뀁뀄뀌뀐뀔뀜뀝"
			+"뀨끄끅끈끊끌끎끓끔끕끗끙끝끼끽낀낄낌낍낏낑나낙낚난낟날낡낢남"
			+"납낫났낭낮낯낱낳내낵낸낼냄냅냇냈냉냐냑냔냘냠냥너넉넋넌널넒넓"
			+"넘넙넛넜넝넣네넥넨넬넴넵넷넸넹녀녁년녈념녑녔녕녘녜녠노녹논놀"
			+"놂놈놉놋농높놓놔놘놜놨뇌뇐뇔뇜뇝뇟뇨뇩뇬뇰뇹뇻뇽누눅눈눋눌눔"
			+"눕눗눙눠눴눼뉘뉜뉠뉨뉩뉴뉵뉼늄늅늉느늑는늘늙늚늠늡늣능늦늪늬"
			+"늰늴니닉닌닐닒님닙닛닝닢다닥닦단닫달닭닮닯닳담답닷닸당닺닻닿"
			+"대댁댄댈댐댑댓댔댕댜더덕덖던덛덜덞덟덤덥덧덩덫덮데덱덴델뎀뎁"
			+"뎃뎄뎅뎌뎐뎔뎠뎡뎨뎬도독돈돋돌돎돐돔돕돗동돛돝돠돤돨돼됐되된"
			+"될됨됩됫됴두둑둔둘둠둡둣둥둬뒀뒈뒝뒤뒨뒬뒵뒷뒹듀듄듈듐듕드득"
			+"든듣들듦듬듭듯등듸디딕딘딛딜딤딥딧딨딩딪따딱딴딸땀땁땃땄땅땋"
			+"때땍땐땔땜땝땟땠땡떠떡떤떨떪떫떰떱떳떴떵떻떼떽뗀뗄뗌뗍뗏뗐뗑"
			+"뗘뗬또똑똔똘똥똬똴뙈뙤뙨뚜뚝뚠뚤뚫뚬뚱뛔뛰뛴뛸뜀뜁뜅뜨뜩뜬뜯"
			+"뜰뜸뜹뜻띄띈띌띔띕띠띤띨띰띱띳띵라락란랄람랍랏랐랑랒랖랗래랙"
			+"랜랠램랩랫랬랭랴략랸럇량러럭런럴럼럽럿렀렁렇레렉렌렐렘렙렛렝"
			+"려력련렬렴렵렷렸령례롄롑롓로록론롤롬롭롯롱롸롼뢍뢨뢰뢴뢸룀룁"
			+"룃룅료룐룔룝룟룡루룩룬룰룸룹룻룽뤄뤘뤠뤼뤽륀륄륌륏륑류륙륜률"
			+"륨륩륫륭르륵른를름릅릇릉릊릍릎리릭린릴림립릿링마막만많맏말맑"
			+"맒맘맙맛망맞맡맣매맥맨맬맴맵맷맸맹맺먀먁먈먕머먹먼멀멂멈멉멋"
			+"멍멎멓메멕멘멜멤멥멧멨멩며멱면멸몃몄명몇몌모목몫몬몰몲몸몹못"
			+"몽뫄뫈뫘뫙뫼묀묄묍묏묑묘묜묠묩묫무묵묶문묻물묽묾뭄뭅뭇뭉뭍뭏"
			+"뭐뭔뭘뭡뭣뭬뮈뮌뮐뮤뮨뮬뮴뮷므믄믈믐믓미믹민믿밀밂밈밉밋밌밍"
			+"및밑바박밖밗반받발밝밞밟밤밥밧방밭배백밴밸뱀뱁뱃뱄뱅뱉뱌뱍뱐"
			+"뱝버벅번벋벌벎범법벗벙벚베벡벤벧벨벰벱벳벴벵벼벽변별볍볏볐병"
			+"볕볘볜보복볶본볼봄봅봇봉봐봔봤봬뵀뵈뵉뵌뵐뵘뵙뵤뵨부북분붇불"
			+"붉붊붐붑붓붕붙붚붜붤붰붸뷔뷕뷘뷜뷩뷰뷴뷸븀븃븅브븍븐블븜븝븟"
			+"비빅빈빌빎빔빕빗빙빚빛빠빡빤빨빪빰빱빳빴빵빻빼빽뺀뺄뺌뺍뺏뺐"
			+"뺑뺘뺙뺨뻐뻑뻔뻗뻘뻠뻣뻤뻥뻬뼁뼈뼉뼘뼙뼛뼜뼝뽀뽁뽄뽈뽐뽑뽕뾔"
			+"뾰뿅뿌뿍뿐뿔뿜뿟뿡쀼쁑쁘쁜쁠쁨쁩삐삑삔삘삠삡삣삥사삭삯산삳살"
			+"삵삶삼삽삿샀상샅새색샌샐샘샙샛샜생샤샥샨샬샴샵샷샹섀섄섈섐섕"
			+"서석섞섟선섣설섦섧섬섭섯섰성섶세섹센셀셈셉셋셌셍셔셕션셜셤셥"
			+"셧셨셩셰셴셸솅소속솎손솔솖솜솝솟송솥솨솩솬솰솽쇄쇈쇌쇔쇗쇘쇠"
			+"쇤쇨쇰쇱쇳쇼쇽숀숄숌숍숏숑수숙순숟술숨숩숫숭숯숱숲숴쉈쉐쉑쉔"
			+"쉘쉠쉥쉬쉭쉰쉴쉼쉽쉿슁슈슉슐슘슛슝스슥슨슬슭슴습슷승시식신싣"
			+"실싫심십싯싱싶싸싹싻싼쌀쌈쌉쌌쌍쌓쌔쌕쌘쌜쌤쌥쌨쌩썅써썩썬썰"
			+"썲썸썹썼썽쎄쎈쎌쏀쏘쏙쏜쏟쏠쏢쏨쏩쏭쏴쏵쏸쐈쐐쐤쐬쐰쐴쐼쐽쑈"
			+"쑤쑥쑨쑬쑴쑵쑹쒀쒔쒜쒸쒼쓩쓰쓱쓴쓸쓺쓿씀씁씌씐씔씜씨씩씬씰씸"
			+"씹씻씽아악안앉않알앍앎앓암압앗았앙앝앞애액앤앨앰앱앳앴앵야약"
			+"얀얄얇얌얍얏양얕얗얘얜얠얩어억언얹얻얼얽얾엄업없엇었엉엊엌엎"
			+"에엑엔엘엠엡엣엥여역엮연열엶엷염엽엾엿였영옅옆옇예옌옐옘옙옛"
			+"옜오옥온올옭옮옰옳옴옵옷옹옻와왁완왈왐왑왓왔왕왜왝왠왬왯왱외"
			+"왹왼욀욈욉욋욍요욕욘욜욤욥욧용우욱운울욹욺움웁웃웅워웍원월웜"
			+"웝웠웡웨웩웬웰웸웹웽위윅윈윌윔윕윗윙유육윤율윰윱윳융윷으윽은"
			+"을읊음읍읏응읒읓읔읕읖읗의읜읠읨읫이익인일읽읾잃임입잇있잉잊"
			+"잎자작잔잖잗잘잚잠잡잣잤장잦재잭잰잴잼잽잿쟀쟁쟈쟉쟌쟎쟐쟘쟝"
			+"쟤쟨쟬저적전절젊점접젓정젖제젝젠젤젬젭젯젱져젼졀졈졉졌졍졔조"
			+"족존졸졺좀좁좃종좆좇좋좌좍좔좝좟좡좨좼좽죄죈죌죔죕죗죙죠죡죤"
			+"죵주죽준줄줅줆줌줍줏중줘줬줴쥐쥑쥔쥘쥠쥡쥣쥬쥰쥴쥼즈즉즌즐즘"
			+"즙즛증지직진짇질짊짐집짓징짖짙짚짜짝짠짢짤짧짬짭짯짰짱째짹짼"
			+"쨀쨈쨉쨋쨌쨍쨔쨘쨩쩌쩍쩐쩔쩜쩝쩟쩠쩡쩨쩽쪄쪘쪼쪽쫀쫄쫌쫍쫏쫑"
			+"쫓쫘쫙쫠쫬쫴쬈쬐쬔쬘쬠쬡쭁쭈쭉쭌쭐쭘쭙쭝쭤쭸쭹쮜쮸쯔쯤쯧쯩찌"
			+"찍찐찔찜찝찡찢찧차착찬찮찰참찹찻찼창찾채책챈챌챔챕챗챘챙챠챤"
			+"챦챨챰챵처척천철첨첩첫첬청체첵첸첼쳄쳅쳇쳉쳐쳔쳤쳬쳰촁초촉촌"
			+"촐촘촙촛총촤촨촬촹최쵠쵤쵬쵭쵯쵱쵸춈추축춘출춤춥춧충춰췄췌췐"
			+"취췬췰췸췹췻췽츄츈츌츔츙츠측츤츨츰츱츳층치칙친칟칠칡침칩칫칭"
			+"카칵칸칼캄캅캇캉캐캑캔캘캠캡캣캤캥캬캭컁커컥컨컫컬컴컵컷컸컹"
			+"케켁켄켈켐켑켓켕켜켠켤켬켭켯켰켱켸코콕콘콜콤콥콧콩콰콱콴콸쾀"
			+"쾅쾌쾡쾨쾰쿄쿠쿡쿤쿨쿰쿱쿳쿵쿼퀀퀄퀑퀘퀭퀴퀵퀸퀼큄큅큇큉큐큔"
			+"큘큠크큭큰클큼큽킁키킥킨킬킴킵킷킹타탁탄탈탉탐탑탓탔탕태택탠"
			+"탤탬탭탯탰탱탸턍터턱턴털턺텀텁텃텄텅테텍텐텔템텝텟텡텨텬텼톄"
			+"톈토톡톤톨톰톱톳통톺톼퇀퇘퇴퇸툇툉툐투툭툰툴툼툽툿퉁퉈퉜퉤튀"
			+"튁튄튈튐튑튕튜튠튤튬튱트특튼튿틀틂틈틉틋틔틘틜틤틥티틱틴틸팀"
			+"팁팃팅파팍팎판팔팖팜팝팟팠팡팥패팩팬팰팸팹팻팼팽퍄퍅퍼퍽펀펄"
			+"펌펍펏펐펑페펙펜펠펨펩펫펭펴편펼폄폅폈평폐폘폡폣포폭폰폴폼폽"
			+"폿퐁퐈퐝푀푄표푠푤푭푯푸푹푼푿풀풂품풉풋풍풔풩퓌퓐퓔퓜퓟퓨퓬"
			+"퓰퓸퓻퓽프픈플픔픕픗피픽핀필핌핍핏핑하학한할핥함합핫항해핵핸"
			+"핼햄햅햇했행햐향허헉헌헐헒험헙헛헝헤헥헨헬헴헵헷헹혀혁현혈혐"
			+"협혓혔형혜혠혤혭호혹혼홀홅홈홉홋홍홑화확환활홧황홰홱홴횃횅회"
			+"획횐횔횝횟횡효횬횰횹횻후훅훈훌훑훔훗훙훠훤훨훰훵훼훽휀휄휑휘"
			+"휙휜휠휨휩휫휭휴휵휸휼흄흇흉흐흑흔흖흗흘흙흠흡흣흥흩희흰흴흼"
			+"흽힁히힉힌힐힘힙힛힝";
		
	/* Hanja to Hangle table( 4,888 charactors, 9,776 bytes ) */
	private final static String Hanja_To_Hangle_Table = "가가가가가가가가가가가가가가가가가가가가가가가가가가가가가각"
			+ "각각각각각각각각각각간간간간간간간간간간간간간간간간간간간간"
			+ "간간간간갈갈갈갈갈갈갈갈갈갈감감감감감감감감감감감감감감감감"
			+ "감감감감갑갑갑갑갑갑강강강강강강강강강강강강강강강강강강강강"
			+ "강강강강개개개개개개개개개개개개개개개개개개개개객객갱갱갱갱"
			+ "갹거거거거거거거거거거거거거거거거거건건건건건건건건건건건건"
			+ "걸걸걸걸검검검검검검검겁겁겁게게게격격격격격격격견견견견견견"
			+ "견견견견견결결결결결결겸겸겸겸겸겸경경경경경경경경경경경경경"
			+ "경경경경경경경경경경경경경경경경경경경경경경경경경경경경경경"
			+ "경경계계계계계계계계계계계계계계계계계계계계계계계계고고고고"
			+ "고고고고고고고고고고고고고고고고고고고고고고고고고고고고고고"
			+ "고고고고고곡곡곡곡곡곡곡곤곤곤곤곤곤곤곤곤곤골골골공공공공공"
			+ "공공공공공공공공공공공곶과과과과과과과과과과과과곽곽곽곽관관"
			+ "관관관관관관관관관관관관관관관괄괄괄괄광광광광광광광광광광광"
			+ "광광괘괘괘괴괴괴괴괴괴괴괴괴굉굉굉굉교교교교교교교교교교교교"
			+ "교교교교교교교교교교교교교구구구구구구구구구구구구구구구구구"
			+ "구구구구구구구구구구구구구구구구구구구구구구구구구구구구구구"
			+ "구구구구구구구국국국국국국군군군군군군굴굴굴굴궁궁궁궁궁궁권"
			+ "권권권권권권권권권궐궐궐궐궐궤궤궤궤궤궤귀귀귀귀귀귀규규규규"
			+ "규규규규규규규규규규규균균균균균균균귤극극극극극극극근근근근"
			+ "근근근근근근근근근근근글금금금금금금금금금금금금금금급급급급"
			+ "급급급긍긍긍긍기기기기기기기기기기기기기기기기기기기기기기기"
			+ "기기기기기기기기기기기기기기기기기기기기기기기기기기기기기기"
			+ "기기기기기기기기기기기긴길길길길김끽나나나나나나나나나나나나"
			+ "나나나낙낙낙낙낙낙낙낙난난난난난난난난난날날남남남남남남남남"
			+ "남납납납납납낭낭낭낭낭낭낭내내내내내내냉여년연연염염염염영영"
			+ "노노노노노노노노노노노노노노노노노노녹녹녹녹녹녹논농농농농농"
			+ "농농뇌뇌뇌뇌뇌뇌요누누누누누누누누눈눌유유늑늑늠능능능능능능"
			+ "이이익익다다단단단단단단단단단단단단단단단단단단단단달달달달"
			+ "달담담담담담담담담담담담담담담담담담답답답답답당당당당당당당"
			+ "당당당당대대대대대대대대대대대대대대대대댁덕덕도도도도도도도"
			+ "도도도도도도도도도도도도도도도도도도도도도도도도도도도도도도"
			+ "도도도독독독독독독독독독독돈돈돈돈돈돈돈돈돈돈돌돌동동동동동"
			+ "동동동동동동동동동동동동두두두두두두두두두두두둔둔둔둔둔둔득"
			+ "등등등등등등등등등나나나나나나나나나낙낙낙낙낙낙낙낙낙난난난"
			+ "난난난난난난날날남남남남남남남남남남납납납낭낭낭낭낭낭낭낭내"
			+ "내내내냉약약양양양양양양양양양양양양양여여여여여여여여여여여"
			+ "여여여여여여여역역역역역역역연연연연연연연연연연연연열열열열"
			+ "열열염염염염염엽영영영영영영영영영영영영영영영영영영예예예예"
			+ "예노노노노노노노노노노노노노노노노노노녹녹녹녹녹녹녹논농농농"
			+ "농농농농뇌뇌뇌뇌뇌뇌뇌뇌요요요요요요요요요요요요용누누누누누"
			+ "누누누누누누누누유유유유유유유유유유유유유유육육육윤윤윤윤윤"
			+ "윤율율율율융늑늑늠능능능능능능이이이이이이이이이이이이리이이"
			+ "이이이이이이이리이이이인인인인인인인인인임임임임임입입입입마"
			+ "마마마마마마마막막막막막막만만만만만만만만만만만만만만만만만"
			+ "만만말말말말말말말망망망망망망망망망망망망매매매매매매매매매"
			+ "매매매매매맥맥맥맥맥맹맹맹맹맹맹멱멱면면면면면면면면면면면멸"
			+ "멸명명명명명명명명명명명명명명명몌모모모모모모모모모모모모모"
			+ "모모모모모모모모모모모목목목목목목목몰몰몽몽몽묘묘묘묘묘묘묘"
			+ "묘묘묘묘묘무무무무무무무무무무무무무무무무무무무무무무묵묵문"
			+ "문문문문문문문문문문문물물물미미미미미미미미미미미미미미미미"
			+ "미미미민민민민민민민민민민민민민밀밀밀박박박박박박박박박박박"
			+ "박박박박박박박박반반반반반반반반반반반반반반반반반반반반반반"
			+ "반반반발발발발발발발발발발발방방방방방방방방방방방방방방방방"
			+ "방방방방방방방방방방방방배배배배배배배배배배배배배배배배배배"
			+ "배배백백백백백백백백번번번번번번번번번번벌벌벌벌범범범범범범"
			+ "범범범법법벽벽벽벽벽벽벽벽벽벽벽변변변변변변변별별별별병병병"
			+ "병병병병병병병병병병병병병병보보보보보보보보보보보보보보보보"
			+ "복복복복복복복복복복복복복복복복복본볼봉봉봉봉봉봉봉봉봉봉봉"
			+ "봉봉봉봉봉부부부부부부부부부부부부부부부부부부부부부부부부부"
			+ "부부부부부부부부부부부부부부부부부부북분분분분분분분분분분분"
			+ "분분분분분분분분불불불불불붕붕붕붕붕붕비비비비비비비비비비비"
			+ "비비비비비비비비비비비비비비비비비비비비비비비비비비비비비비"
			+ "비비빈빈빈빈빈빈빈빈빈빈빈빈빈빈빙빙빙빙사사사사사사사사사사"
			+ "사사사사사사사사사사사사사사사사사사사사사사사사사사사사사사"
			+ "사사사사사사사사사사사사사사사사사사사사삭삭삭삭산산산산산산"
			+ "산산산산산산살살살살살삼삼삼삼삼삼삼삼삽삽삽삽상상상상상상상"
			+ "상상상상상상상상상상상상상상상상상상상상상상상상새새새색색색"
			+ "색색생생생생생서서서서서서서서서서서서서서서서서서서서서서서"
			+ "서서서서서서서석석석석석석석석석석석석석석석선선선선선선선선"
			+ "선선선선선선선선선선선선선선선선선선선선선선선선설설설설설설"
			+ "설설설설설설설섬섬섬섬섬섬섬섬섭섭섭섭성성성성성성성성성성성"
			+ "성성성성성성성세세세세세세세세세소소소소소소소소소소소소소소"
			+ "소소소소소소소소소소소소소소소소소소소소소소소속속속속속속속"
			+ "속속손손손손손손솔송송송송송송송송쇄쇄쇄쇄쇄쇠쇠수수수수수수"
			+ "수수수수수수수수수수수수수수수수수수수수수수수수수수수수수수"
			+ "수수수수수수수수수수수수수수수수수수수수수수수수수숙숙숙숙숙"
			+ "숙숙숙숙숙숙숙순순순순순순순순순순순순순순순순순순순순순순순"
			+ "순순순순술술술술숭숭숭슬슬슬습습습습습승승승승승승승승승승시"
			+ "시시시시시시시시시시시시시시시시시시시시시시시시시시시식식식"
			+ "식식식식식식식식식식식식신신신신신신신신신신신신신신신신신신"
			+ "신신신신신신실실실실심심심심심심심심심심십십십쌍씨아아아아아"
			+ "아아아아아아아아아아아아아악악악악악악악악악악악악악악안안안"
			+ "안안안안안안안알알알알암암암암암암암암압압압압앙앙앙앙앙앙앙"
			+ "애애애애애애애애애애애액액액액액액액앵앵앵앵야야야야야야야야"
			+ "야야야약약약약약약약약약양양양양양양양양양양양양양양양양양양"
			+ "양양양양양양양양양양양양양어어어어어어어어어어억억억억억언언"
			+ "언언언언얼얼엄엄엄엄엄엄업업엔여여여여여여여여여여여여여여여"
			+ "여여여여여여여여여역역역역역역역역역역역역역연연연연연연연연"
			+ "연연연연연연연연연연연연연연연연연연연연연연연연연연연연연연"
			+ "연연연연연열열열열열열열열열열염염염염염염염염염염염염염염염"
			+ "엽엽엽엽영영영영영영영영영영영영영영영영영영영영영영영영영영"
			+ "영영영영영영영영영영영영영영예예예예예예예예예예예예예예예예"
			+ "예예예예예예예예오오오오오오오오오오오오오오오오오오오오오오"
			+ "오오오오오오오오옥옥옥옥옥온온온온온온올옹옹옹옹옹옹옹옹옹와"
			+ "와와와와와와와완완완완완완완완완완완완완완완완완완왈왕왕왕왕"
			+ "왕왜왜왜왜외외외외외요요요요요요요요요요요요요요요요요요요요"
			+ "요요요요요요요요요요요요요요요요요요욕욕욕욕욕욕용용용용용용"
			+ "용용용용용용용용용용용용용용용용용용우우우우우우우우우우우우"
			+ "우우우우우우우우우우우우우우우우우우우우욱욱욱욱욱욱욱욱욱운"
			+ "운운운운운운운운운운운운울울울웅웅원원원원원원원원원원원원원"
			+ "원원원원원원원원원원원원원원월월월위위위위위위위위위위위위위"
			+ "위위위위위위위위위위위위유유유유유유유유유유유유유유유유유유"
			+ "유유유유유유유유유유유유유유유유유유유유유유유유유유유유유유"
			+ "유유유유유유유유육육육육육육육윤윤윤윤윤윤윤윤윤윤윤윤윤율율"
			+ "율율율융융융융융은은은은은은은을음음음음음음읍읍읍응응응응의"
			+ "의의의의의의의의의의의의의의의의의의이이이이이이이이이이이이"
			+ "이이이이이이이이이이이이이이이이이이이이이이이이이이익익익익"
			+ "익익익익인인인인인인인인인인인인인인인인인인인인인인인인일일"
			+ "일일일일일일일임임임임임임임임임임임입입입입입잉잉잉잉자자자"
			+ "자자자자자자자자자자자자자자자자자자자자자자자작작작작작작작"
			+ "작작작작작작잔잔잔잔잔잠잠잠잠잠잠잡장장장장장장장장장장장장"
			+ "장장장장장장장장장장장장장장장장장장장장장장장장장재재재재재"
			+ "재재재재재재재재재재재재쟁쟁쟁쟁저저저저저저저저저저저저저저"
			+ "저저저저저저저저저저저저저저적적적적적적적적적적적적적적적적"
			+ "적적적적적적적적적전전전전전전전전전전전전전전전전전전전전전"
			+ "전전전전전전전전전전전전전전전전전전전전절절절절절절절절점점"
			+ "점점점점점점점접접접정정정정정정정정정정정정정정정정정정정정"
			+ "정정정정정정정정정정정정정정정정정정정정정정정정정정정정정정"
			+ "정정정정정제제제제제제제제제제제제제제제제제제제제제제제조조"
			+ "조조조조조조조조조조조조조조조조조조조조조조조조조조조조조조"
			+ "조조조조조조조조조조조조조조족족족족존존졸졸졸종종종종종종종"
			+ "종종종종종종종종종종좌좌좌좌좌죄주주주주주주주주주주주주주주"
			+ "주주주주주주주주주주주주주주주주주주주주주주주주주주죽죽준준"
			+ "준준준준준준준준준준준준준준준준준줄중중중중즉즐즙즙즙증증증"
			+ "증증증증증증증증지지지지지지지지지지지지지지지지지지지지지지"
			+ "지지지지지지지지지지지지직직직직직진진진진진진진진진진진진진"
			+ "진진진진진진진진진진진진진진진진진진진진진진질질질질질질질질"
			+ "질질질질질질질짐짐집집집집집집집징징징차차차차차차차차차차차"
			+ "차차차차착착착착착착착찬찬찬찬찬찬찬찬찬찬찬찬찬찬찬찰찰찰찰"
			+ "찰참참참참참참참참참참창창창창창창창창창창창창창창창창창창창"
			+ "창창창채채채채채채채채채채채채책책책책처처처처척척척척척척척"
			+ "척척척척척척척척천천천천천천천천천천천천천천천천천천천철철철"
			+ "철철철철철철철첨첨첨첨첨첨첨첨첨첨첩첩첩첩첩첩첩첩첩첩청청청"
			+ "청청청청청체체체체체체체체체체초초초초초초초초초초초초초초초"
			+ "초초초초초초초초초초초초촉촉촉촉촉촉촌촌촌촌총총총총총총총총"
			+ "총총촬최최최추추추추추추추추추추추추추추추추추추추추추추추축"
			+ "축축축축축축축축축축축춘춘춘출출출충충충충충충췌췌췌췌취취취"
			+ "취취취취취취취취취취취측측측측측층치치치치치치치치치치치치치"
			+ "치치치치치치치치치치치칙칙칙친칠칠칠침침침침침침침침침칩칭칭"
			+ "쾌타타타타타타타타타타타타타타탁탁탁탁탁탁탁탁탁탁탁탁탁탁탁"
			+ "탁탄탄탄탄탄탄탄탄탄탄탈탈탐탐탐탐탑탑탑탕탕탕탕탕태태태태태"
			+ "태태태태태태태태태택택택탱터토토토토통통통통통통통퇴퇴퇴퇴퇴"
			+ "퇴투투투투투투특특틈파파파파파파파파파파파파파파파파판판판판"
			+ "판판판판판팔팔팔패패패패패패패패패패패팽팽팽팽퍅편편편편편편"
			+ "편편편편폄평평평평평폐폐폐폐폐폐폐폐폐폐포포포포포포포포포포"
			+ "포포포포포포포포포포포포포포포포포포폭폭폭폭폭폭표표표표표표"
			+ "표표표표표표표표품품풍풍풍풍풍피피피피피피피필필필필필필필필"
			+ "필필핍핍하하하하하하하하하하하하하하학학학학학한한한한한한한"
			+ "한한한한한한한할할함함함함함함함함함함함함합합합합합합합항항"
			+ "항항항항항항항항항항항항항항항해해해해해해해해해해해해해해해"
			+ "해해해핵핵행행행행행향향향향향향향향향허허허허헌헌헌헌헐험험"
			+ "혁혁혁혁현현현현현현현현현현현현현현현현현현현현현혈혈혈혈혐"
			+ "협협협협협협협협협협협협형형형형형형형형형형형형형형형형형형"
			+ "형형혜혜혜혜혜혜혜혜혜호호호호호호호호호호호호호호호호호호호"
			+ "호호호호호호호호호호호호호호호호호호호호호호혹혹혹혼혼혼혼혼"
			+ "혼홀홀홀홍홍홍홍홍홍홍홍홍홍화화화화화화화화화화화화화화확확"
			+ "확확확확환환환환환환환환환환환환환환환환환활활활활활황황황황"
			+ "황황황황황황황황황황황황황황황황황황황황회회회회회회회회회회"
			+ "회회회회회회회회회회획획횡횡횡효효효효효효효효효효효효효후후"
			+ "후후후후후후후후후후후훈훈훈훈훈훈훈훈훈훈훙훤훤훤훤훼훼훼휘"
			+ "휘휘휘휘휘휘휘휴휴휴휴휴휼휼휼흉흉흉흉흉흑흔흔흔흔흘흘흘흘흠" 
			+ "흠흠흡흡흡흡흥희희희희희희희희희희희희희희희희희희희희힐";

	private static final List<Character> CHO = Arrays.asList('ᄀ', 'ᄁ', 'ᄂ', 'ᄃ', 'ᄄ', 'ᄅ', 'ᄆ', 'ᄇ', 'ᄈ', 'ᄉ', 'ᄊ', 'ᄋ',
			'ᄌ', 'ᄍ', 'ᄎ', 'ᄏ', 'ᄐ', 'ᄑ', 'ᄒ'); // 4352, 0x1100 ~ 4370, 0x1112
	private static final List<Character> JWUNG = Arrays.asList('ᅡ', 'ᅢ', 'ᅣ', 'ᅤ', 'ᅥ', 'ᅦ', 'ᅧ', 'ᅨ', 'ᅩ', 'ᅪ', 'ᅫ',
			'ᅬ', 'ᅭ', 'ᅮ', 'ᅯ', 'ᅰ', 'ᅱ', 'ᅲ', 'ᅳ', 'ᅴ', 'ᅵ'); // 4449, 0x1161 ~ 4469, 0x1175
	private static final List<Character> JONG = Arrays.asList((char) 0, 'ᆨ', 'ᆩ', 'ᆪ', 'ᆫ', 'ᆬ', 'ᆭ', 'ᆮ', 'ᆯ', 'ᆰ',
			'ᆱ', 'ᆲ', 'ᆳ', 'ᆴ', 'ᆵ', 'ᆶ', 'ᆷ', 'ᆸ', 'ᆹ', 'ᆺ', 'ᆻ', 'ᆼ', 'ᆽ', 'ᆾ', 'ᆿ', 'ᇀ', 'ᇁ', 'ᇂ'); // 4520, 0x11a8 ~ // 4546, 0x11c2
	
	
	public static String convertC2K(String s1) throws UnsupportedEncodingException {
		int i, cp;
		String pHangle = null;
		String result = "";

		if (s1 == null)
			return null;

		pHangle = Hanja_To_Hangle_Table;
		for (i = 0; i < s1.length(); i++) {
			byte s1Byte[] = s1.substring(i, i + 1).getBytes("MS949");

			if ((((s1Byte[0] & 0xFF) >= 0xCA) && ((s1Byte[0] & 0xFF) <= 0xFD))
					&& (((s1Byte[1] & 0xFF) >= 0xA1) && ((s1Byte[1] & 0xFF) <= 0xFE))) {
				// 한자면 한글테이블에서 가져온다.
				cp = (((s1Byte[0] & 0xFF) - 202) * 94 + ((s1Byte[1] & 0xFF) - 161));
				result += pHangle.charAt(cp);
			} else {
				// 한자가 아니면 그대로 사용한다.
				result += s1.charAt(i);
			}
		}
		return result;
	}

	public static boolean isOnlyEnglish( String data ) { 

		for( int i = 0; i < data.length(); i++ ) { 
			String code = String.format( "%X%n", (int)data.charAt(i));
			if( code.compareTo("20") >= 0 && code.compareTo("7E") <= 0 ) { 
				continue;
			} else { 
				return false;
			}

		}
		return true;
	}
	
	/**
	 * 실행결과가 올바르지 않음. 예를 들어 한국을 입력하면 false를 반환 
	 * 수정할 필요있음. 20160113
	 * @param hcode
	 * @return
	 * @throws UnsupportedEncodingException
	 */
	public static boolean containNoneKor(String hcode) throws UnsupportedEncodingException {
		return !containsHangul(hcode);
	}
	
	
	public static boolean containsHangul(String str)
	{
		for(int i = 0 ; i < str.length() ; i++)
		{
			char ch = str.charAt(i);
			Character.UnicodeBlock unicodeBlock = Character.UnicodeBlock.of(ch);
			if(UnicodeBlock.HANGUL_SYLLABLES.equals(unicodeBlock) ||
					UnicodeBlock.HANGUL_COMPATIBILITY_JAMO.equals(unicodeBlock) ||
					UnicodeBlock.HANGUL_JAMO.equals(unicodeBlock))
				return true;
		}
		return false;
	}
	
	/**
	 * 아스키코드나 한글이 아닌 값이 있을 경우 true를 리턴한다.
	 * @param str
	 * @return
	 */
	public static boolean containsNoneAsciiAndNoneHangul(String str) {
		for (int i = 0, n = str.length(); i < n; i++) {
			char c = str.charAt(i);
			if (isASCII(c) || isHangul(c)) {
				
			} else
				return true;
		}
		return false;
	}
	public static boolean isHangul(char ch)
	{
		Character.UnicodeBlock unicodeBlock = Character.UnicodeBlock.of(ch);
		if (UnicodeBlock.HANGUL_SYLLABLES.equals(unicodeBlock)
				|| UnicodeBlock.HANGUL_COMPATIBILITY_JAMO.equals(unicodeBlock)
				|| UnicodeBlock.HANGUL_JAMO.equals(unicodeBlock))
				return true;
		return false;
	}
	
	// to check if a string only contains US-ASCII code point
	//
	public static boolean isAllASCII(String input) {
	    boolean isASCII = true;
	    for (int i = 0; i < input.length(); i++) {
	        int c = input.charAt(i);
	        if (c > 0x7F) {
	            isASCII = false;
	            break;
	        }
	    }
	    return isASCII;
	}
	
	public static boolean isASCII(char c) {
		boolean isASCII = true;
		if (c > 0x7F) {
			isASCII = false;
		}
		return isASCII;
	}

	/**
	 * 입력받은 글자중에서 아스키코드와 한글이 아닌 문자열을 제거후 결과를 리턴한다.
	 * 문자열중에 공백이 있으면 공백은 제거하지 않는다.
	 * @param str
	 * @return
	 */
	public static String removeNoneAsciiAndNoneHangul(String str) {
		StringBuilder sb = new StringBuilder(str.length());
		for (int i = 0, n = str.length(); i < n; i++) {
			char c = str.charAt(i);
			if (isASCII(c) || isHangul(c)) {
				sb.append(c);
			}
		}
			
		return sb.toString();
	}
	
	/**
	 * 글자 단위가 초성, 중성, 종성으로 분리된 문자열을 결합하여 반환한다.
	 * @param str 문자열이 초성, 중성, 종성으로 분리된 형태
	 * @return str 초성, 중성, 종성이 글자단위로 결합된 형태
	 */
	public static String HangulJaMoConcat(String str) {
		StringBuilder stringBuilder = new StringBuilder();
		int cho = 0, jwung = 0, jong = 0;
		boolean isCho = false, isJwung = false, isJong = false;
		char[] chars = str.toCharArray();
		for (int i = 0; i < chars.length; i++) {
			char c = chars[i];
			if (!isCho && CHO.contains(c)) {
				cho = CHO.indexOf(c);
				isCho = true;
			} else if (isCho && !isJwung && JWUNG.contains(c)) {
				jwung = JWUNG.indexOf(c);
				isJwung = true;
			} else if (isCho && isJwung && !isJong && JONG.contains(c)) {
				jong = JONG.indexOf(c);
				isJong = true;
			} else if (isCho && isJwung && isJong) {
				stringBuilder.append((char) (0xAC00 + 28 * 21 * cho + 28 * jwung + jong));
				isCho = false;
				isJwung = false;
				isJong = false;
				i--;
			} else if (isCho && isJwung) {
				stringBuilder.append((char) (0xAC00 + 28 * 21 * cho + 28 * jwung));
				isCho = false;
				isJwung = false;
				isJong = false;
				i--;
			} else if (isCho) {
				stringBuilder.append((char) (0xAC00 + 28 * 21 * cho));
				isCho = false;
				isJwung = false;
				isJong = false;
				i--;
			} else {
				stringBuilder.append(c);
			}
		}
		if (isCho && isJwung && isJong) {
			stringBuilder.append((char) (0xAC00 + 28 * 21 * cho + 28 * jwung + jong));
		} else if (isCho && isJwung) {
			stringBuilder.append((char) (0xAC00 + 28 * 21 * cho + 28 * jwung));
		} else if (isCho) {
			stringBuilder.append((char) (0xAC00 + 28 * 21 * cho));
		}
		return stringBuilder.toString();
	}
	
}
