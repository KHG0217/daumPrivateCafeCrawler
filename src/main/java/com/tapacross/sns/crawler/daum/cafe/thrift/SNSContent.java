/**
 * Autogenerated by Thrift Compiler (0.7.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package com.tapacross.sns.crawler.daum.cafe.thrift;

import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class SNSContent implements org.apache.thrift.TBase<SNSContent, SNSContent._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("SNSContent");

  private static final org.apache.thrift.protocol.TField MENTION_FIELD_DESC = new org.apache.thrift.protocol.TField("mention", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField REPLY_DELETE_FIELD_DESC = new org.apache.thrift.protocol.TField("replyDelete", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField ARTICLE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("articleId", org.apache.thrift.protocol.TType.I64, (short)3);
  private static final org.apache.thrift.protocol.TField TITLE_FIELD_DESC = new org.apache.thrift.protocol.TField("title", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField CONTENT_FIELD_DESC = new org.apache.thrift.protocol.TField("content", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField URL_FIELD_DESC = new org.apache.thrift.protocol.TField("url", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField CREATE_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("createDate", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField CRAWL_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("crawlDate", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField CONTENT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("contentId", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField ADDRESS_FIELD_DESC = new org.apache.thrift.protocol.TField("address", org.apache.thrift.protocol.TType.STRING, (short)10);
  private static final org.apache.thrift.protocol.TField WRITER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("writerId", org.apache.thrift.protocol.TType.STRING, (short)11);
  private static final org.apache.thrift.protocol.TField LAT_FIELD_DESC = new org.apache.thrift.protocol.TField("lat", org.apache.thrift.protocol.TType.DOUBLE, (short)12);
  private static final org.apache.thrift.protocol.TField LNG_FIELD_DESC = new org.apache.thrift.protocol.TField("lng", org.apache.thrift.protocol.TType.DOUBLE, (short)13);
  private static final org.apache.thrift.protocol.TField RT_FIELD_DESC = new org.apache.thrift.protocol.TField("RT", org.apache.thrift.protocol.TType.STRING, (short)14);
  private static final org.apache.thrift.protocol.TField RE_FIELD_DESC = new org.apache.thrift.protocol.TField("RE", org.apache.thrift.protocol.TType.STRING, (short)15);
  private static final org.apache.thrift.protocol.TField REPLY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("replyId", org.apache.thrift.protocol.TType.STRING, (short)16);
  private static final org.apache.thrift.protocol.TField REPLY_WRITER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("replyWriterId", org.apache.thrift.protocol.TType.STRING, (short)17);
  private static final org.apache.thrift.protocol.TField SITE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("siteId", org.apache.thrift.protocol.TType.STRING, (short)18);
  private static final org.apache.thrift.protocol.TField VIA_FIELD_DESC = new org.apache.thrift.protocol.TField("via", org.apache.thrift.protocol.TType.STRING, (short)19);
  private static final org.apache.thrift.protocol.TField SITE_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("siteType", org.apache.thrift.protocol.TType.STRING, (short)20);
  private static final org.apache.thrift.protocol.TField SITE_SCREEN_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("siteScreenName", org.apache.thrift.protocol.TType.STRING, (short)21);
  private static final org.apache.thrift.protocol.TField SITE_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("siteCode", org.apache.thrift.protocol.TType.I64, (short)22);
  private static final org.apache.thrift.protocol.TField TWITTER_CRAWL_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("twitterCrawlType", org.apache.thrift.protocol.TType.STRING, (short)23);
  private static final org.apache.thrift.protocol.TField WRITER_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("writerName", org.apache.thrift.protocol.TType.STRING, (short)24);
  private static final org.apache.thrift.protocol.TField RETWEET_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("retweetCount", org.apache.thrift.protocol.TType.I64, (short)25);
  private static final org.apache.thrift.protocol.TField FOLLOW_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("followCount", org.apache.thrift.protocol.TType.I32, (short)26);
  private static final org.apache.thrift.protocol.TField LINKS_FIELD_DESC = new org.apache.thrift.protocol.TField("links", org.apache.thrift.protocol.TType.LIST, (short)27);
  private static final org.apache.thrift.protocol.TField SITE_SUB_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("siteSubType", org.apache.thrift.protocol.TType.STRING, (short)28);
  private static final org.apache.thrift.protocol.TField SITE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("siteName", org.apache.thrift.protocol.TType.STRING, (short)29);
  private static final org.apache.thrift.protocol.TField PICTURE_FIELD_DESC = new org.apache.thrift.protocol.TField("picture", org.apache.thrift.protocol.TType.STRING, (short)30);
  private static final org.apache.thrift.protocol.TField SCREEN_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("screenName", org.apache.thrift.protocol.TType.STRING, (short)31);
  private static final org.apache.thrift.protocol.TField SITE_SUB_CATE_FIELD_DESC = new org.apache.thrift.protocol.TField("siteSubCate", org.apache.thrift.protocol.TType.STRING, (short)32);
  private static final org.apache.thrift.protocol.TField SITE_CATEGORY_FIELD_DESC = new org.apache.thrift.protocol.TField("siteCategory", org.apache.thrift.protocol.TType.STRING, (short)33);
  private static final org.apache.thrift.protocol.TField SUB_URL_FIELD_DESC = new org.apache.thrift.protocol.TField("subUrl", org.apache.thrift.protocol.TType.STRING, (short)34);
  private static final org.apache.thrift.protocol.TField CHAR_SET_FIELD_DESC = new org.apache.thrift.protocol.TField("charSet", org.apache.thrift.protocol.TType.STRING, (short)35);
  private static final org.apache.thrift.protocol.TField GET_DEPTH_FIELD_DESC = new org.apache.thrift.protocol.TField("getDepth", org.apache.thrift.protocol.TType.STRING, (short)36);
  private static final org.apache.thrift.protocol.TField IS_META_SEARCH_FIELD_DESC = new org.apache.thrift.protocol.TField("isMetaSearch", org.apache.thrift.protocol.TType.BOOL, (short)37);
  private static final org.apache.thrift.protocol.TField URL_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("urlId", org.apache.thrift.protocol.TType.STRING, (short)38);

  private String mention;
  private String replyDelete;
  private long articleId;
  private String title;
  private String content;
  private String url;
  private String createDate;
  private String crawlDate;
  private String contentId;
  private String address;
  private String writerId;
  private double lat;
  private double lng;
  private String RT;
  private String RE;
  private String replyId;
  private String replyWriterId;
  private String siteId;
  private String via;
  private String siteType;
  private String siteScreenName;
  private long siteCode;
  private String twitterCrawlType;
  private String writerName;
  private long retweetCount;
  private int followCount;
  private List<String> links;
  private String siteSubType;
  private String siteName;
  private String picture;
  private String screenName;
  private String siteSubCate;
  private String siteCategory;
  private String subUrl;
  private String charSet;
  private String getDepth;
  private boolean isMetaSearch;
  private String urlId;
  //
  private long articleIdOld;

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    MENTION((short)1, "mention"),
    REPLY_DELETE((short)2, "replyDelete"),
    ARTICLE_ID((short)3, "articleId"),
    TITLE((short)4, "title"),
    CONTENT((short)5, "content"),
    URL((short)6, "url"),
    CREATE_DATE((short)7, "createDate"),
    CRAWL_DATE((short)8, "crawlDate"),
    CONTENT_ID((short)9, "contentId"),
    ADDRESS((short)10, "address"),
    WRITER_ID((short)11, "writerId"),
    LAT((short)12, "lat"),
    LNG((short)13, "lng"),
    RT((short)14, "RT"),
    RE((short)15, "RE"),
    REPLY_ID((short)16, "replyId"),
    REPLY_WRITER_ID((short)17, "replyWriterId"),
    SITE_ID((short)18, "siteId"),
    VIA((short)19, "via"),
    SITE_TYPE((short)20, "siteType"),
    SITE_SCREEN_NAME((short)21, "siteScreenName"),
    SITE_CODE((short)22, "siteCode"),
    TWITTER_CRAWL_TYPE((short)23, "twitterCrawlType"),
    WRITER_NAME((short)24, "writerName"),
    RETWEET_COUNT((short)25, "retweetCount"),
    FOLLOW_COUNT((short)26, "followCount"),
    LINKS((short)27, "links"),
    SITE_SUB_TYPE((short)28, "siteSubType"),
    SITE_NAME((short)29, "siteName"),
    PICTURE((short)30, "picture"),
    SCREEN_NAME((short)31, "screenName"),
    SITE_SUB_CATE((short)32, "siteSubCate"),
    SITE_CATEGORY((short)33, "siteCategory"),
    SUB_URL((short)34, "subUrl"),
    CHAR_SET((short)35, "charSet"),
    GET_DEPTH((short)36, "getDepth"),
    IS_META_SEARCH((short)37, "isMetaSearch"),
    URL_ID((short)38, "urlId");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // MENTION
          return MENTION;
        case 2: // REPLY_DELETE
          return REPLY_DELETE;
        case 3: // ARTICLE_ID
          return ARTICLE_ID;
        case 4: // TITLE
          return TITLE;
        case 5: // CONTENT
          return CONTENT;
        case 6: // URL
          return URL;
        case 7: // CREATE_DATE
          return CREATE_DATE;
        case 8: // CRAWL_DATE
          return CRAWL_DATE;
        case 9: // CONTENT_ID
          return CONTENT_ID;
        case 10: // ADDRESS
          return ADDRESS;
        case 11: // WRITER_ID
          return WRITER_ID;
        case 12: // LAT
          return LAT;
        case 13: // LNG
          return LNG;
        case 14: // RT
          return RT;
        case 15: // RE
          return RE;
        case 16: // REPLY_ID
          return REPLY_ID;
        case 17: // REPLY_WRITER_ID
          return REPLY_WRITER_ID;
        case 18: // SITE_ID
          return SITE_ID;
        case 19: // VIA
          return VIA;
        case 20: // SITE_TYPE
          return SITE_TYPE;
        case 21: // SITE_SCREEN_NAME
          return SITE_SCREEN_NAME;
        case 22: // SITE_CODE
          return SITE_CODE;
        case 23: // TWITTER_CRAWL_TYPE
          return TWITTER_CRAWL_TYPE;
        case 24: // WRITER_NAME
          return WRITER_NAME;
        case 25: // RETWEET_COUNT
          return RETWEET_COUNT;
        case 26: // FOLLOW_COUNT
          return FOLLOW_COUNT;
        case 27: // LINKS
          return LINKS;
        case 28: // SITE_SUB_TYPE
          return SITE_SUB_TYPE;
        case 29: // SITE_NAME
          return SITE_NAME;
        case 30: // PICTURE
          return PICTURE;
        case 31: // SCREEN_NAME
          return SCREEN_NAME;
        case 32: // SITE_SUB_CATE
          return SITE_SUB_CATE;
        case 33: // SITE_CATEGORY
          return SITE_CATEGORY;
        case 34: // SUB_URL
          return SUB_URL;
        case 35: // CHAR_SET
          return CHAR_SET;
        case 36: // GET_DEPTH
          return GET_DEPTH;
        case 37: // IS_META_SEARCH
          return IS_META_SEARCH;
        case 38: // URL_ID
          return URL_ID;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ARTICLEID_ISSET_ID = 0;
  private static final int __LAT_ISSET_ID = 1;
  private static final int __LNG_ISSET_ID = 2;
  private static final int __SITECODE_ISSET_ID = 3;
  private static final int __RETWEETCOUNT_ISSET_ID = 4;
  private static final int __FOLLOWCOUNT_ISSET_ID = 5;
  private static final int __ISMETASEARCH_ISSET_ID = 6;
  private BitSet __isset_bit_vector = new BitSet(7);

  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.MENTION, new org.apache.thrift.meta_data.FieldMetaData("mention", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.REPLY_DELETE, new org.apache.thrift.meta_data.FieldMetaData("replyDelete", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ARTICLE_ID, new org.apache.thrift.meta_data.FieldMetaData("articleId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.TITLE, new org.apache.thrift.meta_data.FieldMetaData("title", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CONTENT, new org.apache.thrift.meta_data.FieldMetaData("content", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.URL, new org.apache.thrift.meta_data.FieldMetaData("url", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CREATE_DATE, new org.apache.thrift.meta_data.FieldMetaData("createDate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CRAWL_DATE, new org.apache.thrift.meta_data.FieldMetaData("crawlDate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CONTENT_ID, new org.apache.thrift.meta_data.FieldMetaData("contentId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ADDRESS, new org.apache.thrift.meta_data.FieldMetaData("address", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.WRITER_ID, new org.apache.thrift.meta_data.FieldMetaData("writerId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LAT, new org.apache.thrift.meta_data.FieldMetaData("lat", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.LNG, new org.apache.thrift.meta_data.FieldMetaData("lng", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.RT, new org.apache.thrift.meta_data.FieldMetaData("RT", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.RE, new org.apache.thrift.meta_data.FieldMetaData("RE", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.REPLY_ID, new org.apache.thrift.meta_data.FieldMetaData("replyId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.REPLY_WRITER_ID, new org.apache.thrift.meta_data.FieldMetaData("replyWriterId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SITE_ID, new org.apache.thrift.meta_data.FieldMetaData("siteId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.VIA, new org.apache.thrift.meta_data.FieldMetaData("via", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SITE_TYPE, new org.apache.thrift.meta_data.FieldMetaData("siteType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SITE_SCREEN_NAME, new org.apache.thrift.meta_data.FieldMetaData("siteScreenName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SITE_CODE, new org.apache.thrift.meta_data.FieldMetaData("siteCode", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.TWITTER_CRAWL_TYPE, new org.apache.thrift.meta_data.FieldMetaData("twitterCrawlType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.WRITER_NAME, new org.apache.thrift.meta_data.FieldMetaData("writerName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.RETWEET_COUNT, new org.apache.thrift.meta_data.FieldMetaData("retweetCount", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.FOLLOW_COUNT, new org.apache.thrift.meta_data.FieldMetaData("followCount", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.LINKS, new org.apache.thrift.meta_data.FieldMetaData("links", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.SITE_SUB_TYPE, new org.apache.thrift.meta_data.FieldMetaData("siteSubType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SITE_NAME, new org.apache.thrift.meta_data.FieldMetaData("siteName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PICTURE, new org.apache.thrift.meta_data.FieldMetaData("picture", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SCREEN_NAME, new org.apache.thrift.meta_data.FieldMetaData("screenName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SITE_SUB_CATE, new org.apache.thrift.meta_data.FieldMetaData("siteSubCate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SITE_CATEGORY, new org.apache.thrift.meta_data.FieldMetaData("siteCategory", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SUB_URL, new org.apache.thrift.meta_data.FieldMetaData("subUrl", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CHAR_SET, new org.apache.thrift.meta_data.FieldMetaData("charSet", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.GET_DEPTH, new org.apache.thrift.meta_data.FieldMetaData("getDepth", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.IS_META_SEARCH, new org.apache.thrift.meta_data.FieldMetaData("isMetaSearch", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.URL_ID, new org.apache.thrift.meta_data.FieldMetaData("urlId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(SNSContent.class, metaDataMap);
  }

  public SNSContent() {
  }

  public SNSContent(
    String mention,
    String replyDelete,
    long articleId,
    String title,
    String content,
    String url,
    String createDate,
    String crawlDate,
    String contentId,
    String address,
    String writerId,
    double lat,
    double lng,
    String RT,
    String RE,
    String replyId,
    String replyWriterId,
    String siteId,
    String via,
    String siteType,
    String siteScreenName,
    long siteCode,
    String twitterCrawlType,
    String writerName,
    long retweetCount,
    int followCount,
    List<String> links,
    String siteSubType,
    String siteName,
    String picture,
    String screenName,
    String siteSubCate,
    String siteCategory,
    String subUrl,
    String charSet,
    String getDepth,
    boolean isMetaSearch,
    String urlId)
  {
    this();
    this.mention = mention;
    this.replyDelete = replyDelete;
    this.articleId = articleId;
    setArticleIdIsSet(true);
    this.title = title;
    this.content = content;
    this.url = url;
    this.createDate = createDate;
    this.crawlDate = crawlDate;
    this.contentId = contentId;
    this.address = address;
    this.writerId = writerId;
    this.lat = lat;
    setLatIsSet(true);
    this.lng = lng;
    setLngIsSet(true);
    this.RT = RT;
    this.RE = RE;
    this.replyId = replyId;
    this.replyWriterId = replyWriterId;
    this.siteId = siteId;
    this.via = via;
    this.siteType = siteType;
    this.siteScreenName = siteScreenName;
    this.siteCode = siteCode;
    setSiteCodeIsSet(true);
    this.twitterCrawlType = twitterCrawlType;
    this.writerName = writerName;
    this.retweetCount = retweetCount;
    setRetweetCountIsSet(true);
    this.followCount = followCount;
    setFollowCountIsSet(true);
    this.links = links;
    this.siteSubType = siteSubType;
    this.siteName = siteName;
    this.picture = picture;
    this.screenName = screenName;
    this.siteSubCate = siteSubCate;
    this.siteCategory = siteCategory;
    this.subUrl = subUrl;
    this.charSet = charSet;
    this.getDepth = getDepth;
    this.isMetaSearch = isMetaSearch;
    setIsMetaSearchIsSet(true);
    this.urlId = urlId;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public SNSContent(SNSContent other) {
    __isset_bit_vector.clear();
    __isset_bit_vector.or(other.__isset_bit_vector);
    if (other.isSetMention()) {
      this.mention = other.mention;
    }
    if (other.isSetReplyDelete()) {
      this.replyDelete = other.replyDelete;
    }
    this.articleId = other.articleId;
    if (other.isSetTitle()) {
      this.title = other.title;
    }
    if (other.isSetContent()) {
      this.content = other.content;
    }
    if (other.isSetUrl()) {
      this.url = other.url;
    }
    if (other.isSetCreateDate()) {
      this.createDate = other.createDate;
    }
    if (other.isSetCrawlDate()) {
      this.crawlDate = other.crawlDate;
    }
    if (other.isSetContentId()) {
      this.contentId = other.contentId;
    }
    if (other.isSetAddress()) {
      this.address = other.address;
    }
    if (other.isSetWriterId()) {
      this.writerId = other.writerId;
    }
    this.lat = other.lat;
    this.lng = other.lng;
    if (other.isSetRT()) {
      this.RT = other.RT;
    }
    if (other.isSetRE()) {
      this.RE = other.RE;
    }
    if (other.isSetReplyId()) {
      this.replyId = other.replyId;
    }
    if (other.isSetReplyWriterId()) {
      this.replyWriterId = other.replyWriterId;
    }
    if (other.isSetSiteId()) {
      this.siteId = other.siteId;
    }
    if (other.isSetVia()) {
      this.via = other.via;
    }
    if (other.isSetSiteType()) {
      this.siteType = other.siteType;
    }
    if (other.isSetSiteScreenName()) {
      this.siteScreenName = other.siteScreenName;
    }
    this.siteCode = other.siteCode;
    if (other.isSetTwitterCrawlType()) {
      this.twitterCrawlType = other.twitterCrawlType;
    }
    if (other.isSetWriterName()) {
      this.writerName = other.writerName;
    }
    this.retweetCount = other.retweetCount;
    this.followCount = other.followCount;
    if (other.isSetLinks()) {
      List<String> __this__links = new ArrayList<String>();
      for (String other_element : other.links) {
        __this__links.add(other_element);
      }
      this.links = __this__links;
    }
    if (other.isSetSiteSubType()) {
      this.siteSubType = other.siteSubType;
    }
    if (other.isSetSiteName()) {
      this.siteName = other.siteName;
    }
    if (other.isSetPicture()) {
      this.picture = other.picture;
    }
    if (other.isSetScreenName()) {
      this.screenName = other.screenName;
    }
    if (other.isSetSiteSubCate()) {
      this.siteSubCate = other.siteSubCate;
    }
    if (other.isSetSiteCategory()) {
      this.siteCategory = other.siteCategory;
    }
    if (other.isSetSubUrl()) {
      this.subUrl = other.subUrl;
    }
    if (other.isSetCharSet()) {
      this.charSet = other.charSet;
    }
    if (other.isSetGetDepth()) {
      this.getDepth = other.getDepth;
    }
    this.isMetaSearch = other.isMetaSearch;
    if (other.isSetUrlId()) {
      this.urlId = other.urlId;
    }
  }

  public SNSContent deepCopy() {
    return new SNSContent(this);
  }

  public void clear() {
    this.mention = null;
    this.replyDelete = null;
    setArticleIdIsSet(false);
    this.articleId = 0;
    this.title = null;
    this.content = null;
    this.url = null;
    this.createDate = null;
    this.crawlDate = null;
    this.contentId = null;
    this.address = null;
    this.writerId = null;
    setLatIsSet(false);
    this.lat = 0.0;
    setLngIsSet(false);
    this.lng = 0.0;
    this.RT = null;
    this.RE = null;
    this.replyId = null;
    this.replyWriterId = null;
    this.siteId = null;
    this.via = null;
    this.siteType = null;
    this.siteScreenName = null;
    setSiteCodeIsSet(false);
    this.siteCode = 0;
    this.twitterCrawlType = null;
    this.writerName = null;
    setRetweetCountIsSet(false);
    this.retweetCount = 0;
    setFollowCountIsSet(false);
    this.followCount = 0;
    this.links = null;
    this.siteSubType = null;
    this.siteName = null;
    this.picture = null;
    this.screenName = null;
    this.siteSubCate = null;
    this.siteCategory = null;
    this.subUrl = null;
    this.charSet = null;
    this.getDepth = null;
    setIsMetaSearchIsSet(false);
    this.isMetaSearch = false;
    this.urlId = null;
  }

  public String getMention() {
    return this.mention;
  }

  public void setMention(String mention) {
    this.mention = mention;
  }

  public void unsetMention() {
    this.mention = null;
  }

  /** Returns true if field mention is set (has been assigned a value) and false otherwise */
  public boolean isSetMention() {
    return this.mention != null;
  }

  public void setMentionIsSet(boolean value) {
    if (!value) {
      this.mention = null;
    }
  }

  public String getReplyDelete() {
    return this.replyDelete;
  }

  public void setReplyDelete(String replyDelete) {
    this.replyDelete = replyDelete;
  }

  public void unsetReplyDelete() {
    this.replyDelete = null;
  }

  /** Returns true if field replyDelete is set (has been assigned a value) and false otherwise */
  public boolean isSetReplyDelete() {
    return this.replyDelete != null;
  }

  public void setReplyDeleteIsSet(boolean value) {
    if (!value) {
      this.replyDelete = null;
    }
  }

  public long getArticleId() {
    return this.articleId;
  }

  public void setArticleId(long articleId) {
    this.articleId = articleId;
    setArticleIdIsSet(true);
  }

  public void unsetArticleId() {
    __isset_bit_vector.clear(__ARTICLEID_ISSET_ID);
  }

  /** Returns true if field articleId is set (has been assigned a value) and false otherwise */
  public boolean isSetArticleId() {
    return __isset_bit_vector.get(__ARTICLEID_ISSET_ID);
  }

  public void setArticleIdIsSet(boolean value) {
    __isset_bit_vector.set(__ARTICLEID_ISSET_ID, value);
  }

  public String getTitle() {
    return this.title;
  }

  public void setTitle(String title) {
    this.title = title;
  }

  public void unsetTitle() {
    this.title = null;
  }

  /** Returns true if field title is set (has been assigned a value) and false otherwise */
  public boolean isSetTitle() {
    return this.title != null;
  }

  public void setTitleIsSet(boolean value) {
    if (!value) {
      this.title = null;
    }
  }

  public String getContent() {
    return this.content;
  }

  public void setContent(String content) {
    this.content = content;
  }

  public void unsetContent() {
    this.content = null;
  }

  /** Returns true if field content is set (has been assigned a value) and false otherwise */
  public boolean isSetContent() {
    return this.content != null;
  }

  public void setContentIsSet(boolean value) {
    if (!value) {
      this.content = null;
    }
  }

  public String getUrl() {
    return this.url;
  }

  public void setUrl(String url) {
    this.url = url;
  }

  public void unsetUrl() {
    this.url = null;
  }

  /** Returns true if field url is set (has been assigned a value) and false otherwise */
  public boolean isSetUrl() {
    return this.url != null;
  }

  public void setUrlIsSet(boolean value) {
    if (!value) {
      this.url = null;
    }
  }

  public String getCreateDate() {
    return this.createDate;
  }

  public void setCreateDate(String createDate) {
    this.createDate = createDate;
  }

  public void unsetCreateDate() {
    this.createDate = null;
  }

  /** Returns true if field createDate is set (has been assigned a value) and false otherwise */
  public boolean isSetCreateDate() {
    return this.createDate != null;
  }

  public void setCreateDateIsSet(boolean value) {
    if (!value) {
      this.createDate = null;
    }
  }

  public String getCrawlDate() {
    return this.crawlDate;
  }

  public void setCrawlDate(String crawlDate) {
    this.crawlDate = crawlDate;
  }

  public void unsetCrawlDate() {
    this.crawlDate = null;
  }

  /** Returns true if field crawlDate is set (has been assigned a value) and false otherwise */
  public boolean isSetCrawlDate() {
    return this.crawlDate != null;
  }

  public void setCrawlDateIsSet(boolean value) {
    if (!value) {
      this.crawlDate = null;
    }
  }

  //added by tukang
  //null check 필요
  public String getContentId() {
	  if(this.contentId == null || this.contentId.length() == 0)
		  this.contentId = "";

	  return this.contentId;
  }

  public void setContentId(String contentId) {
    this.contentId = contentId;
  }

  public void unsetContentId() {
    this.contentId = null;
  }

  /** Returns true if field contentId is set (has been assigned a value) and false otherwise */
  public boolean isSetContentId() {
    return this.contentId != null;
  }

  public void setContentIdIsSet(boolean value) {
    if (!value) {
      this.contentId = null;
    }
  }

  public String getAddress() {
    return this.address;
  }

  public void setAddress(String address) {
    this.address = address;
  }

  public void unsetAddress() {
    this.address = null;
  }

  /** Returns true if field address is set (has been assigned a value) and false otherwise */
  public boolean isSetAddress() {
    return this.address != null;
  }

  public void setAddressIsSet(boolean value) {
    if (!value) {
      this.address = null;
    }
  }

  public String getWriterId() {
    return this.writerId;
  }

  public void setWriterId(String writerId) {
    this.writerId = writerId;
  }

  public void unsetWriterId() {
    this.writerId = null;
  }

  /** Returns true if field writerId is set (has been assigned a value) and false otherwise */
  public boolean isSetWriterId() {
    return this.writerId != null;
  }

  public void setWriterIdIsSet(boolean value) {
    if (!value) {
      this.writerId = null;
    }
  }

  public double getLat() {
    return this.lat;
  }

  public void setLat(double lat) {
    this.lat = lat;
    setLatIsSet(true);
  }

  public void unsetLat() {
    __isset_bit_vector.clear(__LAT_ISSET_ID);
  }

  /** Returns true if field lat is set (has been assigned a value) and false otherwise */
  public boolean isSetLat() {
    return __isset_bit_vector.get(__LAT_ISSET_ID);
  }

  public void setLatIsSet(boolean value) {
    __isset_bit_vector.set(__LAT_ISSET_ID, value);
  }

  public double getLng() {
    return this.lng;
  }

  public void setLng(double lng) {
    this.lng = lng;
    setLngIsSet(true);
  }

  public void unsetLng() {
    __isset_bit_vector.clear(__LNG_ISSET_ID);
  }

  /** Returns true if field lng is set (has been assigned a value) and false otherwise */
  public boolean isSetLng() {
    return __isset_bit_vector.get(__LNG_ISSET_ID);
  }

  public void setLngIsSet(boolean value) {
    __isset_bit_vector.set(__LNG_ISSET_ID, value);
  }

  public String getRT() {
    return this.RT;
  }

  public void setRT(String RT) {
    this.RT = RT;
  }

  public void unsetRT() {
    this.RT = null;
  }

  /** Returns true if field RT is set (has been assigned a value) and false otherwise */
  public boolean isSetRT() {
    return this.RT != null;
  }

  public void setRTIsSet(boolean value) {
    if (!value) {
      this.RT = null;
    }
  }

  public String getRE() {
    return this.RE;
  }

  public void setRE(String RE) {
    this.RE = RE;
  }

  public void unsetRE() {
    this.RE = null;
  }

  /** Returns true if field RE is set (has been assigned a value) and false otherwise */
  public boolean isSetRE() {
    return this.RE != null;
  }

  public void setREIsSet(boolean value) {
    if (!value) {
      this.RE = null;
    }
  }

  public String getReplyId() {
    return this.replyId;
  }

  public void setReplyId(String replyId) {
    this.replyId = replyId;
  }

  public void unsetReplyId() {
    this.replyId = null;
  }

  /** Returns true if field replyId is set (has been assigned a value) and false otherwise */
  public boolean isSetReplyId() {
    return this.replyId != null;
  }

  public void setReplyIdIsSet(boolean value) {
    if (!value) {
      this.replyId = null;
    }
  }

  public String getReplyWriterId() {
    return this.replyWriterId;
  }

  public void setReplyWriterId(String replyWriterId) {
    this.replyWriterId = replyWriterId;
  }

  public void unsetReplyWriterId() {
    this.replyWriterId = null;
  }

  /** Returns true if field replyWriterId is set (has been assigned a value) and false otherwise */
  public boolean isSetReplyWriterId() {
    return this.replyWriterId != null;
  }

  public void setReplyWriterIdIsSet(boolean value) {
    if (!value) {
      this.replyWriterId = null;
    }
  }

  public String getSiteId() {
    return this.siteId;
  }

  public void setSiteId(String siteId) {
    this.siteId = siteId;
  }

  public void unsetSiteId() {
    this.siteId = null;
  }

  /** Returns true if field siteId is set (has been assigned a value) and false otherwise */
  public boolean isSetSiteId() {
    return this.siteId != null;
  }

  public void setSiteIdIsSet(boolean value) {
    if (!value) {
      this.siteId = null;
    }
  }

  public String getVia() {
    return this.via;
  }

  public void setVia(String via) {
    this.via = via;
  }

  public void unsetVia() {
    this.via = null;
  }

  /** Returns true if field via is set (has been assigned a value) and false otherwise */
  public boolean isSetVia() {
    return this.via != null;
  }

  public void setViaIsSet(boolean value) {
    if (!value) {
      this.via = null;
    }
  }

  public String getSiteType() {
    return this.siteType;
  }

  public void setSiteType(String siteType) {
    this.siteType = siteType;
  }

  public void unsetSiteType() {
    this.siteType = null;
  }

  /** Returns true if field siteType is set (has been assigned a value) and false otherwise */
  public boolean isSetSiteType() {
    return this.siteType != null;
  }

  public void setSiteTypeIsSet(boolean value) {
    if (!value) {
      this.siteType = null;
    }
  }

  public String getSiteScreenName() {
    return this.siteScreenName;
  }

  public void setSiteScreenName(String siteScreenName) {
    this.siteScreenName = siteScreenName;
  }

  public void unsetSiteScreenName() {
    this.siteScreenName = null;
  }

  /** Returns true if field siteScreenName is set (has been assigned a value) and false otherwise */
  public boolean isSetSiteScreenName() {
    return this.siteScreenName != null;
  }

  public void setSiteScreenNameIsSet(boolean value) {
    if (!value) {
      this.siteScreenName = null;
    }
  }

  public long getSiteCode() {
    return this.siteCode;
  }

  public void setSiteCode(long siteCode) {
    this.siteCode = siteCode;
    setSiteCodeIsSet(true);
  }

  public void unsetSiteCode() {
    __isset_bit_vector.clear(__SITECODE_ISSET_ID);
  }

  /** Returns true if field siteCode is set (has been assigned a value) and false otherwise */
  public boolean isSetSiteCode() {
    return __isset_bit_vector.get(__SITECODE_ISSET_ID);
  }

  public void setSiteCodeIsSet(boolean value) {
    __isset_bit_vector.set(__SITECODE_ISSET_ID, value);
  }

  public String getTwitterCrawlType() {
    return this.twitterCrawlType;
  }

  public void setTwitterCrawlType(String twitterCrawlType) {
    this.twitterCrawlType = twitterCrawlType;
  }

  public void unsetTwitterCrawlType() {
    this.twitterCrawlType = null;
  }

  /** Returns true if field twitterCrawlType is set (has been assigned a value) and false otherwise */
  public boolean isSetTwitterCrawlType() {
    return this.twitterCrawlType != null;
  }

  public void setTwitterCrawlTypeIsSet(boolean value) {
    if (!value) {
      this.twitterCrawlType = null;
    }
  }

  public String getWriterName() {
    return this.writerName;
  }

  public void setWriterName(String writerName) {
    this.writerName = writerName;
  }

  public void unsetWriterName() {
    this.writerName = null;
  }

  /** Returns true if field writerName is set (has been assigned a value) and false otherwise */
  public boolean isSetWriterName() {
    return this.writerName != null;
  }

  public void setWriterNameIsSet(boolean value) {
    if (!value) {
      this.writerName = null;
    }
  }

  public long getRetweetCount() {
    return this.retweetCount;
  }

  public void setRetweetCount(long retweetCount) {
    this.retweetCount = retweetCount;
    setRetweetCountIsSet(true);
  }

  public void unsetRetweetCount() {
    __isset_bit_vector.clear(__RETWEETCOUNT_ISSET_ID);
  }

  /** Returns true if field retweetCount is set (has been assigned a value) and false otherwise */
  public boolean isSetRetweetCount() {
    return __isset_bit_vector.get(__RETWEETCOUNT_ISSET_ID);
  }

  public void setRetweetCountIsSet(boolean value) {
    __isset_bit_vector.set(__RETWEETCOUNT_ISSET_ID, value);
  }

  public int getFollowCount() {
    return this.followCount;
  }

  public void setFollowCount(int followCount) {
    this.followCount = followCount;
    setFollowCountIsSet(true);
  }

  public void unsetFollowCount() {
    __isset_bit_vector.clear(__FOLLOWCOUNT_ISSET_ID);
  }

  /** Returns true if field followCount is set (has been assigned a value) and false otherwise */
  public boolean isSetFollowCount() {
    return __isset_bit_vector.get(__FOLLOWCOUNT_ISSET_ID);
  }

  public void setFollowCountIsSet(boolean value) {
    __isset_bit_vector.set(__FOLLOWCOUNT_ISSET_ID, value);
  }

  public int getLinksSize() {
    return (this.links == null) ? 0 : this.links.size();
  }

  public java.util.Iterator<String> getLinksIterator() {
    return (this.links == null) ? null : this.links.iterator();
  }

  public void addToLinks(String elem) {
    if (this.links == null) {
      this.links = new ArrayList<String>();
    }
    this.links.add(elem);
  }

  public List<String> getLinks() {
    return this.links;
  }

  public void setLinks(List<String> links) {
    this.links = links;
  }

  public void unsetLinks() {
    this.links = null;
  }

  /** Returns true if field links is set (has been assigned a value) and false otherwise */
  public boolean isSetLinks() {
    return this.links != null;
  }

  public void setLinksIsSet(boolean value) {
    if (!value) {
      this.links = null;
    }
  }

  public String getSiteSubType() {
    return this.siteSubType;
  }

  public void setSiteSubType(String siteSubType) {
    this.siteSubType = siteSubType;
  }

  public void unsetSiteSubType() {
    this.siteSubType = null;
  }

  /** Returns true if field siteSubType is set (has been assigned a value) and false otherwise */
  public boolean isSetSiteSubType() {
    return this.siteSubType != null;
  }

  public void setSiteSubTypeIsSet(boolean value) {
    if (!value) {
      this.siteSubType = null;
    }
  }

  public String getSiteName() {
    return this.siteName;
  }

  public void setSiteName(String siteName) {
    this.siteName = siteName;
  }

  public void unsetSiteName() {
    this.siteName = null;
  }

  /** Returns true if field siteName is set (has been assigned a value) and false otherwise */
  public boolean isSetSiteName() {
    return this.siteName != null;
  }

  public void setSiteNameIsSet(boolean value) {
    if (!value) {
      this.siteName = null;
    }
  }

  public String getPicture() {
    return this.picture;
  }

  public void setPicture(String picture) {
    this.picture = picture;
  }

  public void unsetPicture() {
    this.picture = null;
  }

  /** Returns true if field picture is set (has been assigned a value) and false otherwise */
  public boolean isSetPicture() {
    return this.picture != null;
  }

  public void setPictureIsSet(boolean value) {
    if (!value) {
      this.picture = null;
    }
  }

  public String getScreenName() {
    return this.screenName;
  }

  public void setScreenName(String screenName) {
    this.screenName = screenName;
  }

  public void unsetScreenName() {
    this.screenName = null;
  }

  /** Returns true if field screenName is set (has been assigned a value) and false otherwise */
  public boolean isSetScreenName() {
    return this.screenName != null;
  }

  public void setScreenNameIsSet(boolean value) {
    if (!value) {
      this.screenName = null;
    }
  }

  public String getSiteSubCate() {
    return this.siteSubCate;
  }

  public void setSiteSubCate(String siteSubCate) {
    this.siteSubCate = siteSubCate;
  }

  public void unsetSiteSubCate() {
    this.siteSubCate = null;
  }

  /** Returns true if field siteSubCate is set (has been assigned a value) and false otherwise */
  public boolean isSetSiteSubCate() {
    return this.siteSubCate != null;
  }

  public void setSiteSubCateIsSet(boolean value) {
    if (!value) {
      this.siteSubCate = null;
    }
  }

  public String getSiteCategory() {
    return this.siteCategory;
  }

  public void setSiteCategory(String siteCategory) {
    this.siteCategory = siteCategory;
  }

  public void unsetSiteCategory() {
    this.siteCategory = null;
  }

  /** Returns true if field siteCategory is set (has been assigned a value) and false otherwise */
  public boolean isSetSiteCategory() {
    return this.siteCategory != null;
  }

  public void setSiteCategoryIsSet(boolean value) {
    if (!value) {
      this.siteCategory = null;
    }
  }

  public String getSubUrl() {
    return this.subUrl;
  }

  public void setSubUrl(String subUrl) {
    this.subUrl = subUrl;
  }

  public void unsetSubUrl() {
    this.subUrl = null;
  }

  /** Returns true if field subUrl is set (has been assigned a value) and false otherwise */
  public boolean isSetSubUrl() {
    return this.subUrl != null;
  }

  public void setSubUrlIsSet(boolean value) {
    if (!value) {
      this.subUrl = null;
    }
  }

  public String getCharSet() {
    return this.charSet;
  }

  public void setCharSet(String charSet) {
    this.charSet = charSet;
  }

  public void unsetCharSet() {
    this.charSet = null;
  }

  /** Returns true if field charSet is set (has been assigned a value) and false otherwise */
  public boolean isSetCharSet() {
    return this.charSet != null;
  }

  public void setCharSetIsSet(boolean value) {
    if (!value) {
      this.charSet = null;
    }
  }

  public String getGetDepth() {
    return this.getDepth;
  }

  public void setGetDepth(String getDepth) {
    this.getDepth = getDepth;
  }

  public void unsetGetDepth() {
    this.getDepth = null;
  }

  /** Returns true if field getDepth is set (has been assigned a value) and false otherwise */
  public boolean isSetGetDepth() {
    return this.getDepth != null;
  }

  public void setGetDepthIsSet(boolean value) {
    if (!value) {
      this.getDepth = null;
    }
  }

  public boolean isIsMetaSearch() {
    return this.isMetaSearch;
  }

  public void setIsMetaSearch(boolean isMetaSearch) {
    this.isMetaSearch = isMetaSearch;
    setIsMetaSearchIsSet(true);
  }

  public void unsetIsMetaSearch() {
    __isset_bit_vector.clear(__ISMETASEARCH_ISSET_ID);
  }

  /** Returns true if field isMetaSearch is set (has been assigned a value) and false otherwise */
  public boolean isSetIsMetaSearch() {
    return __isset_bit_vector.get(__ISMETASEARCH_ISSET_ID);
  }

  public void setIsMetaSearchIsSet(boolean value) {
    __isset_bit_vector.set(__ISMETASEARCH_ISSET_ID, value);
  }

  public String getUrlId() {
    return this.urlId;
  }

  public void setUrlId(String urlId) {
    this.urlId = urlId;
  }

  public void unsetUrlId() {
    this.urlId = null;
  }

  /** Returns true if field urlId is set (has been assigned a value) and false otherwise */
  public boolean isSetUrlId() {
    return this.urlId != null;
  }

  public void setUrlIdIsSet(boolean value) {
    if (!value) {
      this.urlId = null;
    }
  }
  ////////////////
  public void setArticleIdOld(long articleIdOld) {
	  this.articleIdOld = articleIdOld;
  }
  
  public long getArticleIdOld() {
	  return this.articleIdOld;
  }
  ////////////////

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case MENTION:
      if (value == null) {
        unsetMention();
      } else {
        setMention((String)value);
      }
      break;

    case REPLY_DELETE:
      if (value == null) {
        unsetReplyDelete();
      } else {
        setReplyDelete((String)value);
      }
      break;

    case ARTICLE_ID:
      if (value == null) {
        unsetArticleId();
      } else {
        setArticleId((Long)value);
      }
      break;

    case TITLE:
      if (value == null) {
        unsetTitle();
      } else {
        setTitle((String)value);
      }
      break;

    case CONTENT:
      if (value == null) {
        unsetContent();
      } else {
        setContent((String)value);
      }
      break;

    case URL:
      if (value == null) {
        unsetUrl();
      } else {
        setUrl((String)value);
      }
      break;

    case CREATE_DATE:
      if (value == null) {
        unsetCreateDate();
      } else {
        setCreateDate((String)value);
      }
      break;

    case CRAWL_DATE:
      if (value == null) {
        unsetCrawlDate();
      } else {
        setCrawlDate((String)value);
      }
      break;

    case CONTENT_ID:
      if (value == null) {
        unsetContentId();
      } else {
        setContentId((String)value);
      }
      break;

    case ADDRESS:
      if (value == null) {
        unsetAddress();
      } else {
        setAddress((String)value);
      }
      break;

    case WRITER_ID:
      if (value == null) {
        unsetWriterId();
      } else {
        setWriterId((String)value);
      }
      break;

    case LAT:
      if (value == null) {
        unsetLat();
      } else {
        setLat((Double)value);
      }
      break;

    case LNG:
      if (value == null) {
        unsetLng();
      } else {
        setLng((Double)value);
      }
      break;

    case RT:
      if (value == null) {
        unsetRT();
      } else {
        setRT((String)value);
      }
      break;

    case RE:
      if (value == null) {
        unsetRE();
      } else {
        setRE((String)value);
      }
      break;

    case REPLY_ID:
      if (value == null) {
        unsetReplyId();
      } else {
        setReplyId((String)value);
      }
      break;

    case REPLY_WRITER_ID:
      if (value == null) {
        unsetReplyWriterId();
      } else {
        setReplyWriterId((String)value);
      }
      break;

    case SITE_ID:
      if (value == null) {
        unsetSiteId();
      } else {
        setSiteId((String)value);
      }
      break;

    case VIA:
      if (value == null) {
        unsetVia();
      } else {
        setVia((String)value);
      }
      break;

    case SITE_TYPE:
      if (value == null) {
        unsetSiteType();
      } else {
        setSiteType((String)value);
      }
      break;

    case SITE_SCREEN_NAME:
      if (value == null) {
        unsetSiteScreenName();
      } else {
        setSiteScreenName((String)value);
      }
      break;

    case SITE_CODE:
      if (value == null) {
        unsetSiteCode();
      } else {
        setSiteCode((Long)value);
      }
      break;

    case TWITTER_CRAWL_TYPE:
      if (value == null) {
        unsetTwitterCrawlType();
      } else {
        setTwitterCrawlType((String)value);
      }
      break;

    case WRITER_NAME:
      if (value == null) {
        unsetWriterName();
      } else {
        setWriterName((String)value);
      }
      break;

    case RETWEET_COUNT:
      if (value == null) {
        unsetRetweetCount();
      } else {
        setRetweetCount((Long)value);
      }
      break;

    case FOLLOW_COUNT:
      if (value == null) {
        unsetFollowCount();
      } else {
        setFollowCount((Integer)value);
      }
      break;

    case LINKS:
      if (value == null) {
        unsetLinks();
      } else {
        setLinks((List<String>)value);
      }
      break;

    case SITE_SUB_TYPE:
      if (value == null) {
        unsetSiteSubType();
      } else {
        setSiteSubType((String)value);
      }
      break;

    case SITE_NAME:
      if (value == null) {
        unsetSiteName();
      } else {
        setSiteName((String)value);
      }
      break;

    case PICTURE:
      if (value == null) {
        unsetPicture();
      } else {
        setPicture((String)value);
      }
      break;

    case SCREEN_NAME:
      if (value == null) {
        unsetScreenName();
      } else {
        setScreenName((String)value);
      }
      break;

    case SITE_SUB_CATE:
      if (value == null) {
        unsetSiteSubCate();
      } else {
        setSiteSubCate((String)value);
      }
      break;

    case SITE_CATEGORY:
      if (value == null) {
        unsetSiteCategory();
      } else {
        setSiteCategory((String)value);
      }
      break;

    case SUB_URL:
      if (value == null) {
        unsetSubUrl();
      } else {
        setSubUrl((String)value);
      }
      break;

    case CHAR_SET:
      if (value == null) {
        unsetCharSet();
      } else {
        setCharSet((String)value);
      }
      break;

    case GET_DEPTH:
      if (value == null) {
        unsetGetDepth();
      } else {
        setGetDepth((String)value);
      }
      break;

    case IS_META_SEARCH:
      if (value == null) {
        unsetIsMetaSearch();
      } else {
        setIsMetaSearch((Boolean)value);
      }
      break;

    case URL_ID:
      if (value == null) {
        unsetUrlId();
      } else {
        setUrlId((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case MENTION:
      return getMention();

    case REPLY_DELETE:
      return getReplyDelete();

    case ARTICLE_ID:
      return Long.valueOf(getArticleId());

    case TITLE:
      return getTitle();

    case CONTENT:
      return getContent();

    case URL:
      return getUrl();

    case CREATE_DATE:
      return getCreateDate();

    case CRAWL_DATE:
      return getCrawlDate();

    case CONTENT_ID:
      return getContentId();

    case ADDRESS:
      return getAddress();

    case WRITER_ID:
      return getWriterId();

    case LAT:
      return Double.valueOf(getLat());

    case LNG:
      return Double.valueOf(getLng());

    case RT:
      return getRT();

    case RE:
      return getRE();

    case REPLY_ID:
      return getReplyId();

    case REPLY_WRITER_ID:
      return getReplyWriterId();

    case SITE_ID:
      return getSiteId();

    case VIA:
      return getVia();

    case SITE_TYPE:
      return getSiteType();

    case SITE_SCREEN_NAME:
      return getSiteScreenName();

    case SITE_CODE:
      return Long.valueOf(getSiteCode());

    case TWITTER_CRAWL_TYPE:
      return getTwitterCrawlType();

    case WRITER_NAME:
      return getWriterName();

    case RETWEET_COUNT:
      return Long.valueOf(getRetweetCount());

    case FOLLOW_COUNT:
      return Integer.valueOf(getFollowCount());

    case LINKS:
      return getLinks();

    case SITE_SUB_TYPE:
      return getSiteSubType();

    case SITE_NAME:
      return getSiteName();

    case PICTURE:
      return getPicture();

    case SCREEN_NAME:
      return getScreenName();

    case SITE_SUB_CATE:
      return getSiteSubCate();

    case SITE_CATEGORY:
      return getSiteCategory();

    case SUB_URL:
      return getSubUrl();

    case CHAR_SET:
      return getCharSet();

    case GET_DEPTH:
      return getGetDepth();

    case IS_META_SEARCH:
      return Boolean.valueOf(isIsMetaSearch());

    case URL_ID:
      return getUrlId();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case MENTION:
      return isSetMention();
    case REPLY_DELETE:
      return isSetReplyDelete();
    case ARTICLE_ID:
      return isSetArticleId();
    case TITLE:
      return isSetTitle();
    case CONTENT:
      return isSetContent();
    case URL:
      return isSetUrl();
    case CREATE_DATE:
      return isSetCreateDate();
    case CRAWL_DATE:
      return isSetCrawlDate();
    case CONTENT_ID:
      return isSetContentId();
    case ADDRESS:
      return isSetAddress();
    case WRITER_ID:
      return isSetWriterId();
    case LAT:
      return isSetLat();
    case LNG:
      return isSetLng();
    case RT:
      return isSetRT();
    case RE:
      return isSetRE();
    case REPLY_ID:
      return isSetReplyId();
    case REPLY_WRITER_ID:
      return isSetReplyWriterId();
    case SITE_ID:
      return isSetSiteId();
    case VIA:
      return isSetVia();
    case SITE_TYPE:
      return isSetSiteType();
    case SITE_SCREEN_NAME:
      return isSetSiteScreenName();
    case SITE_CODE:
      return isSetSiteCode();
    case TWITTER_CRAWL_TYPE:
      return isSetTwitterCrawlType();
    case WRITER_NAME:
      return isSetWriterName();
    case RETWEET_COUNT:
      return isSetRetweetCount();
    case FOLLOW_COUNT:
      return isSetFollowCount();
    case LINKS:
      return isSetLinks();
    case SITE_SUB_TYPE:
      return isSetSiteSubType();
    case SITE_NAME:
      return isSetSiteName();
    case PICTURE:
      return isSetPicture();
    case SCREEN_NAME:
      return isSetScreenName();
    case SITE_SUB_CATE:
      return isSetSiteSubCate();
    case SITE_CATEGORY:
      return isSetSiteCategory();
    case SUB_URL:
      return isSetSubUrl();
    case CHAR_SET:
      return isSetCharSet();
    case GET_DEPTH:
      return isSetGetDepth();
    case IS_META_SEARCH:
      return isSetIsMetaSearch();
    case URL_ID:
      return isSetUrlId();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof SNSContent)
      return this.equals((SNSContent)that);
    return false;
  }

  public boolean equals(SNSContent that) {
    if (that == null)
      return false;

    boolean this_present_mention = true && this.isSetMention();
    boolean that_present_mention = true && that.isSetMention();
    if (this_present_mention || that_present_mention) {
      if (!(this_present_mention && that_present_mention))
        return false;
      if (!this.mention.equals(that.mention))
        return false;
    }

    boolean this_present_replyDelete = true && this.isSetReplyDelete();
    boolean that_present_replyDelete = true && that.isSetReplyDelete();
    if (this_present_replyDelete || that_present_replyDelete) {
      if (!(this_present_replyDelete && that_present_replyDelete))
        return false;
      if (!this.replyDelete.equals(that.replyDelete))
        return false;
    }

    boolean this_present_articleId = true;
    boolean that_present_articleId = true;
    if (this_present_articleId || that_present_articleId) {
      if (!(this_present_articleId && that_present_articleId))
        return false;
      if (this.articleId != that.articleId)
        return false;
    }

    boolean this_present_title = true && this.isSetTitle();
    boolean that_present_title = true && that.isSetTitle();
    if (this_present_title || that_present_title) {
      if (!(this_present_title && that_present_title))
        return false;
      if (!this.title.equals(that.title))
        return false;
    }

    boolean this_present_content = true && this.isSetContent();
    boolean that_present_content = true && that.isSetContent();
    if (this_present_content || that_present_content) {
      if (!(this_present_content && that_present_content))
        return false;
      if (!this.content.equals(that.content))
        return false;
    }

    boolean this_present_url = true && this.isSetUrl();
    boolean that_present_url = true && that.isSetUrl();
    if (this_present_url || that_present_url) {
      if (!(this_present_url && that_present_url))
        return false;
      if (!this.url.equals(that.url))
        return false;
    }

    boolean this_present_createDate = true && this.isSetCreateDate();
    boolean that_present_createDate = true && that.isSetCreateDate();
    if (this_present_createDate || that_present_createDate) {
      if (!(this_present_createDate && that_present_createDate))
        return false;
      if (!this.createDate.equals(that.createDate))
        return false;
    }

    boolean this_present_crawlDate = true && this.isSetCrawlDate();
    boolean that_present_crawlDate = true && that.isSetCrawlDate();
    if (this_present_crawlDate || that_present_crawlDate) {
      if (!(this_present_crawlDate && that_present_crawlDate))
        return false;
      if (!this.crawlDate.equals(that.crawlDate))
        return false;
    }

    boolean this_present_contentId = true && this.isSetContentId();
    boolean that_present_contentId = true && that.isSetContentId();
    if (this_present_contentId || that_present_contentId) {
      if (!(this_present_contentId && that_present_contentId))
        return false;
      if (!this.contentId.equals(that.contentId))
        return false;
    }

    boolean this_present_address = true && this.isSetAddress();
    boolean that_present_address = true && that.isSetAddress();
    if (this_present_address || that_present_address) {
      if (!(this_present_address && that_present_address))
        return false;
      if (!this.address.equals(that.address))
        return false;
    }

    boolean this_present_writerId = true && this.isSetWriterId();
    boolean that_present_writerId = true && that.isSetWriterId();
    if (this_present_writerId || that_present_writerId) {
      if (!(this_present_writerId && that_present_writerId))
        return false;
      if (!this.writerId.equals(that.writerId))
        return false;
    }

    boolean this_present_lat = true;
    boolean that_present_lat = true;
    if (this_present_lat || that_present_lat) {
      if (!(this_present_lat && that_present_lat))
        return false;
      if (this.lat != that.lat)
        return false;
    }

    boolean this_present_lng = true;
    boolean that_present_lng = true;
    if (this_present_lng || that_present_lng) {
      if (!(this_present_lng && that_present_lng))
        return false;
      if (this.lng != that.lng)
        return false;
    }

    boolean this_present_RT = true && this.isSetRT();
    boolean that_present_RT = true && that.isSetRT();
    if (this_present_RT || that_present_RT) {
      if (!(this_present_RT && that_present_RT))
        return false;
      if (!this.RT.equals(that.RT))
        return false;
    }

    boolean this_present_RE = true && this.isSetRE();
    boolean that_present_RE = true && that.isSetRE();
    if (this_present_RE || that_present_RE) {
      if (!(this_present_RE && that_present_RE))
        return false;
      if (!this.RE.equals(that.RE))
        return false;
    }

    boolean this_present_replyId = true && this.isSetReplyId();
    boolean that_present_replyId = true && that.isSetReplyId();
    if (this_present_replyId || that_present_replyId) {
      if (!(this_present_replyId && that_present_replyId))
        return false;
      if (!this.replyId.equals(that.replyId))
        return false;
    }

    boolean this_present_replyWriterId = true && this.isSetReplyWriterId();
    boolean that_present_replyWriterId = true && that.isSetReplyWriterId();
    if (this_present_replyWriterId || that_present_replyWriterId) {
      if (!(this_present_replyWriterId && that_present_replyWriterId))
        return false;
      if (!this.replyWriterId.equals(that.replyWriterId))
        return false;
    }

    boolean this_present_siteId = true && this.isSetSiteId();
    boolean that_present_siteId = true && that.isSetSiteId();
    if (this_present_siteId || that_present_siteId) {
      if (!(this_present_siteId && that_present_siteId))
        return false;
      if (!this.siteId.equals(that.siteId))
        return false;
    }

    boolean this_present_via = true && this.isSetVia();
    boolean that_present_via = true && that.isSetVia();
    if (this_present_via || that_present_via) {
      if (!(this_present_via && that_present_via))
        return false;
      if (!this.via.equals(that.via))
        return false;
    }

    boolean this_present_siteType = true && this.isSetSiteType();
    boolean that_present_siteType = true && that.isSetSiteType();
    if (this_present_siteType || that_present_siteType) {
      if (!(this_present_siteType && that_present_siteType))
        return false;
      if (!this.siteType.equals(that.siteType))
        return false;
    }

    boolean this_present_siteScreenName = true && this.isSetSiteScreenName();
    boolean that_present_siteScreenName = true && that.isSetSiteScreenName();
    if (this_present_siteScreenName || that_present_siteScreenName) {
      if (!(this_present_siteScreenName && that_present_siteScreenName))
        return false;
      if (!this.siteScreenName.equals(that.siteScreenName))
        return false;
    }

    boolean this_present_siteCode = true;
    boolean that_present_siteCode = true;
    if (this_present_siteCode || that_present_siteCode) {
      if (!(this_present_siteCode && that_present_siteCode))
        return false;
      if (this.siteCode != that.siteCode)
        return false;
    }

    boolean this_present_twitterCrawlType = true && this.isSetTwitterCrawlType();
    boolean that_present_twitterCrawlType = true && that.isSetTwitterCrawlType();
    if (this_present_twitterCrawlType || that_present_twitterCrawlType) {
      if (!(this_present_twitterCrawlType && that_present_twitterCrawlType))
        return false;
      if (!this.twitterCrawlType.equals(that.twitterCrawlType))
        return false;
    }

    boolean this_present_writerName = true && this.isSetWriterName();
    boolean that_present_writerName = true && that.isSetWriterName();
    if (this_present_writerName || that_present_writerName) {
      if (!(this_present_writerName && that_present_writerName))
        return false;
      if (!this.writerName.equals(that.writerName))
        return false;
    }

    boolean this_present_retweetCount = true;
    boolean that_present_retweetCount = true;
    if (this_present_retweetCount || that_present_retweetCount) {
      if (!(this_present_retweetCount && that_present_retweetCount))
        return false;
      if (this.retweetCount != that.retweetCount)
        return false;
    }

    boolean this_present_followCount = true;
    boolean that_present_followCount = true;
    if (this_present_followCount || that_present_followCount) {
      if (!(this_present_followCount && that_present_followCount))
        return false;
      if (this.followCount != that.followCount)
        return false;
    }

    boolean this_present_links = true && this.isSetLinks();
    boolean that_present_links = true && that.isSetLinks();
    if (this_present_links || that_present_links) {
      if (!(this_present_links && that_present_links))
        return false;
      if (!this.links.equals(that.links))
        return false;
    }

    boolean this_present_siteSubType = true && this.isSetSiteSubType();
    boolean that_present_siteSubType = true && that.isSetSiteSubType();
    if (this_present_siteSubType || that_present_siteSubType) {
      if (!(this_present_siteSubType && that_present_siteSubType))
        return false;
      if (!this.siteSubType.equals(that.siteSubType))
        return false;
    }

    boolean this_present_siteName = true && this.isSetSiteName();
    boolean that_present_siteName = true && that.isSetSiteName();
    if (this_present_siteName || that_present_siteName) {
      if (!(this_present_siteName && that_present_siteName))
        return false;
      if (!this.siteName.equals(that.siteName))
        return false;
    }

    boolean this_present_picture = true && this.isSetPicture();
    boolean that_present_picture = true && that.isSetPicture();
    if (this_present_picture || that_present_picture) {
      if (!(this_present_picture && that_present_picture))
        return false;
      if (!this.picture.equals(that.picture))
        return false;
    }

    boolean this_present_screenName = true && this.isSetScreenName();
    boolean that_present_screenName = true && that.isSetScreenName();
    if (this_present_screenName || that_present_screenName) {
      if (!(this_present_screenName && that_present_screenName))
        return false;
      if (!this.screenName.equals(that.screenName))
        return false;
    }

    boolean this_present_siteSubCate = true && this.isSetSiteSubCate();
    boolean that_present_siteSubCate = true && that.isSetSiteSubCate();
    if (this_present_siteSubCate || that_present_siteSubCate) {
      if (!(this_present_siteSubCate && that_present_siteSubCate))
        return false;
      if (!this.siteSubCate.equals(that.siteSubCate))
        return false;
    }

    boolean this_present_siteCategory = true && this.isSetSiteCategory();
    boolean that_present_siteCategory = true && that.isSetSiteCategory();
    if (this_present_siteCategory || that_present_siteCategory) {
      if (!(this_present_siteCategory && that_present_siteCategory))
        return false;
      if (!this.siteCategory.equals(that.siteCategory))
        return false;
    }

    boolean this_present_subUrl = true && this.isSetSubUrl();
    boolean that_present_subUrl = true && that.isSetSubUrl();
    if (this_present_subUrl || that_present_subUrl) {
      if (!(this_present_subUrl && that_present_subUrl))
        return false;
      if (!this.subUrl.equals(that.subUrl))
        return false;
    }

    boolean this_present_charSet = true && this.isSetCharSet();
    boolean that_present_charSet = true && that.isSetCharSet();
    if (this_present_charSet || that_present_charSet) {
      if (!(this_present_charSet && that_present_charSet))
        return false;
      if (!this.charSet.equals(that.charSet))
        return false;
    }

    boolean this_present_getDepth = true && this.isSetGetDepth();
    boolean that_present_getDepth = true && that.isSetGetDepth();
    if (this_present_getDepth || that_present_getDepth) {
      if (!(this_present_getDepth && that_present_getDepth))
        return false;
      if (!this.getDepth.equals(that.getDepth))
        return false;
    }

    boolean this_present_isMetaSearch = true;
    boolean that_present_isMetaSearch = true;
    if (this_present_isMetaSearch || that_present_isMetaSearch) {
      if (!(this_present_isMetaSearch && that_present_isMetaSearch))
        return false;
      if (this.isMetaSearch != that.isMetaSearch)
        return false;
    }

    boolean this_present_urlId = true && this.isSetUrlId();
    boolean that_present_urlId = true && that.isSetUrlId();
    if (this_present_urlId || that_present_urlId) {
      if (!(this_present_urlId && that_present_urlId))
        return false;
      if (!this.urlId.equals(that.urlId))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(SNSContent other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    SNSContent typedOther = (SNSContent)other;

    lastComparison = Boolean.valueOf(isSetMention()).compareTo(typedOther.isSetMention());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMention()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mention, typedOther.mention);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetReplyDelete()).compareTo(typedOther.isSetReplyDelete());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReplyDelete()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.replyDelete, typedOther.replyDelete);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetArticleId()).compareTo(typedOther.isSetArticleId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetArticleId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.articleId, typedOther.articleId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTitle()).compareTo(typedOther.isSetTitle());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTitle()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.title, typedOther.title);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetContent()).compareTo(typedOther.isSetContent());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetContent()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.content, typedOther.content);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUrl()).compareTo(typedOther.isSetUrl());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUrl()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.url, typedOther.url);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreateDate()).compareTo(typedOther.isSetCreateDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreateDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.createDate, typedOther.createDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCrawlDate()).compareTo(typedOther.isSetCrawlDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCrawlDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.crawlDate, typedOther.crawlDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetContentId()).compareTo(typedOther.isSetContentId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetContentId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.contentId, typedOther.contentId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAddress()).compareTo(typedOther.isSetAddress());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAddress()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.address, typedOther.address);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetWriterId()).compareTo(typedOther.isSetWriterId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetWriterId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.writerId, typedOther.writerId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLat()).compareTo(typedOther.isSetLat());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLat()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lat, typedOther.lat);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLng()).compareTo(typedOther.isSetLng());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLng()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lng, typedOther.lng);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRT()).compareTo(typedOther.isSetRT());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRT()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.RT, typedOther.RT);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRE()).compareTo(typedOther.isSetRE());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRE()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.RE, typedOther.RE);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetReplyId()).compareTo(typedOther.isSetReplyId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReplyId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.replyId, typedOther.replyId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetReplyWriterId()).compareTo(typedOther.isSetReplyWriterId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReplyWriterId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.replyWriterId, typedOther.replyWriterId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSiteId()).compareTo(typedOther.isSetSiteId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSiteId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.siteId, typedOther.siteId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetVia()).compareTo(typedOther.isSetVia());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVia()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.via, typedOther.via);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSiteType()).compareTo(typedOther.isSetSiteType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSiteType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.siteType, typedOther.siteType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSiteScreenName()).compareTo(typedOther.isSetSiteScreenName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSiteScreenName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.siteScreenName, typedOther.siteScreenName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSiteCode()).compareTo(typedOther.isSetSiteCode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSiteCode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.siteCode, typedOther.siteCode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTwitterCrawlType()).compareTo(typedOther.isSetTwitterCrawlType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTwitterCrawlType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.twitterCrawlType, typedOther.twitterCrawlType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetWriterName()).compareTo(typedOther.isSetWriterName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetWriterName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.writerName, typedOther.writerName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRetweetCount()).compareTo(typedOther.isSetRetweetCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRetweetCount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.retweetCount, typedOther.retweetCount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFollowCount()).compareTo(typedOther.isSetFollowCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFollowCount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.followCount, typedOther.followCount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLinks()).compareTo(typedOther.isSetLinks());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLinks()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.links, typedOther.links);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSiteSubType()).compareTo(typedOther.isSetSiteSubType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSiteSubType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.siteSubType, typedOther.siteSubType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSiteName()).compareTo(typedOther.isSetSiteName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSiteName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.siteName, typedOther.siteName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPicture()).compareTo(typedOther.isSetPicture());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPicture()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.picture, typedOther.picture);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetScreenName()).compareTo(typedOther.isSetScreenName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetScreenName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.screenName, typedOther.screenName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSiteSubCate()).compareTo(typedOther.isSetSiteSubCate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSiteSubCate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.siteSubCate, typedOther.siteSubCate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSiteCategory()).compareTo(typedOther.isSetSiteCategory());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSiteCategory()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.siteCategory, typedOther.siteCategory);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSubUrl()).compareTo(typedOther.isSetSubUrl());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSubUrl()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.subUrl, typedOther.subUrl);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCharSet()).compareTo(typedOther.isSetCharSet());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCharSet()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.charSet, typedOther.charSet);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetGetDepth()).compareTo(typedOther.isSetGetDepth());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGetDepth()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.getDepth, typedOther.getDepth);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIsMetaSearch()).compareTo(typedOther.isSetIsMetaSearch());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsMetaSearch()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isMetaSearch, typedOther.isMetaSearch);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUrlId()).compareTo(typedOther.isSetUrlId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUrlId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.urlId, typedOther.urlId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    org.apache.thrift.protocol.TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == org.apache.thrift.protocol.TType.STOP) { 
        break;
      }
      switch (field.id) {
        case 1: // MENTION
          if (field.type == org.apache.thrift.protocol.TType.STRING) {
            this.mention = iprot.readString();
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 2: // REPLY_DELETE
          if (field.type == org.apache.thrift.protocol.TType.STRING) {
            this.replyDelete = iprot.readString();
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 3: // ARTICLE_ID
          if (field.type == org.apache.thrift.protocol.TType.I64) {
            this.articleId = iprot.readI64();
            setArticleIdIsSet(true);
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 4: // TITLE
          if (field.type == org.apache.thrift.protocol.TType.STRING) {
            this.title = iprot.readString();
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 5: // CONTENT
          if (field.type == org.apache.thrift.protocol.TType.STRING) {
            this.content = iprot.readString();
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 6: // URL
          if (field.type == org.apache.thrift.protocol.TType.STRING) {
            this.url = iprot.readString();
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 7: // CREATE_DATE
          if (field.type == org.apache.thrift.protocol.TType.STRING) {
            this.createDate = iprot.readString();
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 8: // CRAWL_DATE
          if (field.type == org.apache.thrift.protocol.TType.STRING) {
            this.crawlDate = iprot.readString();
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 9: // CONTENT_ID
          if (field.type == org.apache.thrift.protocol.TType.STRING) {
            this.contentId = iprot.readString();
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 10: // ADDRESS
          if (field.type == org.apache.thrift.protocol.TType.STRING) {
            this.address = iprot.readString();
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 11: // WRITER_ID
          if (field.type == org.apache.thrift.protocol.TType.STRING) {
            this.writerId = iprot.readString();
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 12: // LAT
          if (field.type == org.apache.thrift.protocol.TType.DOUBLE) {
            this.lat = iprot.readDouble();
            setLatIsSet(true);
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 13: // LNG
          if (field.type == org.apache.thrift.protocol.TType.DOUBLE) {
            this.lng = iprot.readDouble();
            setLngIsSet(true);
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 14: // RT
          if (field.type == org.apache.thrift.protocol.TType.STRING) {
            this.RT = iprot.readString();
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 15: // RE
          if (field.type == org.apache.thrift.protocol.TType.STRING) {
            this.RE = iprot.readString();
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 16: // REPLY_ID
          if (field.type == org.apache.thrift.protocol.TType.STRING) {
            this.replyId = iprot.readString();
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 17: // REPLY_WRITER_ID
          if (field.type == org.apache.thrift.protocol.TType.STRING) {
            this.replyWriterId = iprot.readString();
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 18: // SITE_ID
          if (field.type == org.apache.thrift.protocol.TType.STRING) {
            this.siteId = iprot.readString();
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 19: // VIA
          if (field.type == org.apache.thrift.protocol.TType.STRING) {
            this.via = iprot.readString();
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 20: // SITE_TYPE
          if (field.type == org.apache.thrift.protocol.TType.STRING) {
            this.siteType = iprot.readString();
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 21: // SITE_SCREEN_NAME
          if (field.type == org.apache.thrift.protocol.TType.STRING) {
            this.siteScreenName = iprot.readString();
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 22: // SITE_CODE
          if (field.type == org.apache.thrift.protocol.TType.I64) {
            this.siteCode = iprot.readI64();
            setSiteCodeIsSet(true);
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 23: // TWITTER_CRAWL_TYPE
          if (field.type == org.apache.thrift.protocol.TType.STRING) {
            this.twitterCrawlType = iprot.readString();
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 24: // WRITER_NAME
          if (field.type == org.apache.thrift.protocol.TType.STRING) {
            this.writerName = iprot.readString();
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 25: // RETWEET_COUNT
          if (field.type == org.apache.thrift.protocol.TType.I64) {
            this.retweetCount = iprot.readI64();
            setRetweetCountIsSet(true);
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 26: // FOLLOW_COUNT
          if (field.type == org.apache.thrift.protocol.TType.I32) {
            this.followCount = iprot.readI32();
            setFollowCountIsSet(true);
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 27: // LINKS
          if (field.type == org.apache.thrift.protocol.TType.LIST) {
            {
              org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
              this.links = new ArrayList<String>(_list0.size);
              for (int _i1 = 0; _i1 < _list0.size; ++_i1)
              {
                String _elem2;
                _elem2 = iprot.readString();
                this.links.add(_elem2);
              }
              iprot.readListEnd();
            }
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 28: // SITE_SUB_TYPE
          if (field.type == org.apache.thrift.protocol.TType.STRING) {
            this.siteSubType = iprot.readString();
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 29: // SITE_NAME
          if (field.type == org.apache.thrift.protocol.TType.STRING) {
            this.siteName = iprot.readString();
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 30: // PICTURE
          if (field.type == org.apache.thrift.protocol.TType.STRING) {
            this.picture = iprot.readString();
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 31: // SCREEN_NAME
          if (field.type == org.apache.thrift.protocol.TType.STRING) {
            this.screenName = iprot.readString();
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 32: // SITE_SUB_CATE
          if (field.type == org.apache.thrift.protocol.TType.STRING) {
            this.siteSubCate = iprot.readString();
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 33: // SITE_CATEGORY
          if (field.type == org.apache.thrift.protocol.TType.STRING) {
            this.siteCategory = iprot.readString();
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 34: // SUB_URL
          if (field.type == org.apache.thrift.protocol.TType.STRING) {
            this.subUrl = iprot.readString();
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 35: // CHAR_SET
          if (field.type == org.apache.thrift.protocol.TType.STRING) {
            this.charSet = iprot.readString();
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 36: // GET_DEPTH
          if (field.type == org.apache.thrift.protocol.TType.STRING) {
            this.getDepth = iprot.readString();
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 37: // IS_META_SEARCH
          if (field.type == org.apache.thrift.protocol.TType.BOOL) {
            this.isMetaSearch = iprot.readBool();
            setIsMetaSearchIsSet(true);
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 38: // URL_ID
          if (field.type == org.apache.thrift.protocol.TType.STRING) {
            this.urlId = iprot.readString();
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();
    validate();
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    if (this.mention != null) {
      oprot.writeFieldBegin(MENTION_FIELD_DESC);
      oprot.writeString(this.mention);
      oprot.writeFieldEnd();
    }
    if (this.replyDelete != null) {
      oprot.writeFieldBegin(REPLY_DELETE_FIELD_DESC);
      oprot.writeString(this.replyDelete);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldBegin(ARTICLE_ID_FIELD_DESC);
    oprot.writeI64(this.articleId);
    oprot.writeFieldEnd();
    if (this.title != null) {
      oprot.writeFieldBegin(TITLE_FIELD_DESC);
      oprot.writeString(this.title);
      oprot.writeFieldEnd();
    }
    if (this.content != null) {
      oprot.writeFieldBegin(CONTENT_FIELD_DESC);
      oprot.writeString(this.content);
      oprot.writeFieldEnd();
    }
    if (this.url != null) {
      oprot.writeFieldBegin(URL_FIELD_DESC);
      oprot.writeString(this.url);
      oprot.writeFieldEnd();
    }
    if (this.createDate != null) {
      oprot.writeFieldBegin(CREATE_DATE_FIELD_DESC);
      oprot.writeString(this.createDate);
      oprot.writeFieldEnd();
    }
    if (this.crawlDate != null) {
      oprot.writeFieldBegin(CRAWL_DATE_FIELD_DESC);
      oprot.writeString(this.crawlDate);
      oprot.writeFieldEnd();
    }
    if (this.contentId != null) {
      oprot.writeFieldBegin(CONTENT_ID_FIELD_DESC);
      oprot.writeString(this.contentId);
      oprot.writeFieldEnd();
    }
    if (this.address != null) {
      oprot.writeFieldBegin(ADDRESS_FIELD_DESC);
      oprot.writeString(this.address);
      oprot.writeFieldEnd();
    }
    if (this.writerId != null) {
      oprot.writeFieldBegin(WRITER_ID_FIELD_DESC);
      oprot.writeString(this.writerId);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldBegin(LAT_FIELD_DESC);
    oprot.writeDouble(this.lat);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(LNG_FIELD_DESC);
    oprot.writeDouble(this.lng);
    oprot.writeFieldEnd();
    if (this.RT != null) {
      oprot.writeFieldBegin(RT_FIELD_DESC);
      oprot.writeString(this.RT);
      oprot.writeFieldEnd();
    }
    if (this.RE != null) {
      oprot.writeFieldBegin(RE_FIELD_DESC);
      oprot.writeString(this.RE);
      oprot.writeFieldEnd();
    }
    if (this.replyId != null) {
      oprot.writeFieldBegin(REPLY_ID_FIELD_DESC);
      oprot.writeString(this.replyId);
      oprot.writeFieldEnd();
    }
    if (this.replyWriterId != null) {
      oprot.writeFieldBegin(REPLY_WRITER_ID_FIELD_DESC);
      oprot.writeString(this.replyWriterId);
      oprot.writeFieldEnd();
    }
    if (this.siteId != null) {
      oprot.writeFieldBegin(SITE_ID_FIELD_DESC);
      oprot.writeString(this.siteId);
      oprot.writeFieldEnd();
    }
    if (this.via != null) {
      oprot.writeFieldBegin(VIA_FIELD_DESC);
      oprot.writeString(this.via);
      oprot.writeFieldEnd();
    }
    if (this.siteType != null) {
      oprot.writeFieldBegin(SITE_TYPE_FIELD_DESC);
      oprot.writeString(this.siteType);
      oprot.writeFieldEnd();
    }
    if (this.siteScreenName != null) {
      oprot.writeFieldBegin(SITE_SCREEN_NAME_FIELD_DESC);
      oprot.writeString(this.siteScreenName);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldBegin(SITE_CODE_FIELD_DESC);
    oprot.writeI64(this.siteCode);
    oprot.writeFieldEnd();
    if (this.twitterCrawlType != null) {
      oprot.writeFieldBegin(TWITTER_CRAWL_TYPE_FIELD_DESC);
      oprot.writeString(this.twitterCrawlType);
      oprot.writeFieldEnd();
    }
    if (this.writerName != null) {
      oprot.writeFieldBegin(WRITER_NAME_FIELD_DESC);
      oprot.writeString(this.writerName);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldBegin(RETWEET_COUNT_FIELD_DESC);
    oprot.writeI64(this.retweetCount);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(FOLLOW_COUNT_FIELD_DESC);
    oprot.writeI32(this.followCount);
    oprot.writeFieldEnd();
    if (this.links != null) {
      oprot.writeFieldBegin(LINKS_FIELD_DESC);
      {
        oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, this.links.size()));
        for (String _iter3 : this.links)
        {
          oprot.writeString(_iter3);
        }
        oprot.writeListEnd();
      }
      oprot.writeFieldEnd();
    }
    if (this.siteSubType != null) {
      oprot.writeFieldBegin(SITE_SUB_TYPE_FIELD_DESC);
      oprot.writeString(this.siteSubType);
      oprot.writeFieldEnd();
    }
    if (this.siteName != null) {
      oprot.writeFieldBegin(SITE_NAME_FIELD_DESC);
      oprot.writeString(this.siteName);
      oprot.writeFieldEnd();
    }
    if (this.picture != null) {
      oprot.writeFieldBegin(PICTURE_FIELD_DESC);
      oprot.writeString(this.picture);
      oprot.writeFieldEnd();
    }
    if (this.screenName != null) {
      oprot.writeFieldBegin(SCREEN_NAME_FIELD_DESC);
      oprot.writeString(this.screenName);
      oprot.writeFieldEnd();
    }
    if (this.siteSubCate != null) {
      oprot.writeFieldBegin(SITE_SUB_CATE_FIELD_DESC);
      oprot.writeString(this.siteSubCate);
      oprot.writeFieldEnd();
    }
    if (this.siteCategory != null) {
      oprot.writeFieldBegin(SITE_CATEGORY_FIELD_DESC);
      oprot.writeString(this.siteCategory);
      oprot.writeFieldEnd();
    }
    if (this.subUrl != null) {
      oprot.writeFieldBegin(SUB_URL_FIELD_DESC);
      oprot.writeString(this.subUrl);
      oprot.writeFieldEnd();
    }
    if (this.charSet != null) {
      oprot.writeFieldBegin(CHAR_SET_FIELD_DESC);
      oprot.writeString(this.charSet);
      oprot.writeFieldEnd();
    }
    if (this.getDepth != null) {
      oprot.writeFieldBegin(GET_DEPTH_FIELD_DESC);
      oprot.writeString(this.getDepth);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldBegin(IS_META_SEARCH_FIELD_DESC);
    oprot.writeBool(this.isMetaSearch);
    oprot.writeFieldEnd();
    if (this.urlId != null) {
      oprot.writeFieldBegin(URL_ID_FIELD_DESC);
      oprot.writeString(this.urlId);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("SNSContent(");
    boolean first = true;

    sb.append("mention:");
    if (this.mention == null) {
      sb.append("null");
    } else {
      sb.append(this.mention);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("replyDelete:");
    if (this.replyDelete == null) {
      sb.append("null");
    } else {
      sb.append(this.replyDelete);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("articleId:");
    sb.append(this.articleId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("title:");
    if (this.title == null) {
      sb.append("null");
    } else {
      sb.append(this.title);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("content:");
    if (this.content == null) {
      sb.append("null");
    } else {
      sb.append(this.content);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("url:");
    if (this.url == null) {
      sb.append("null");
    } else {
      sb.append(this.url);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("createDate:");
    if (this.createDate == null) {
      sb.append("null");
    } else {
      sb.append(this.createDate);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("crawlDate:");
    if (this.crawlDate == null) {
      sb.append("null");
    } else {
      sb.append(this.crawlDate);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("contentId:");
    if (this.contentId == null) {
      sb.append("null");
    } else {
      sb.append(this.contentId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("address:");
    if (this.address == null) {
      sb.append("null");
    } else {
      sb.append(this.address);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("writerId:");
    if (this.writerId == null) {
      sb.append("null");
    } else {
      sb.append(this.writerId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("lat:");
    sb.append(this.lat);
    first = false;
    if (!first) sb.append(", ");
    sb.append("lng:");
    sb.append(this.lng);
    first = false;
    if (!first) sb.append(", ");
    sb.append("RT:");
    if (this.RT == null) {
      sb.append("null");
    } else {
      sb.append(this.RT);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("RE:");
    if (this.RE == null) {
      sb.append("null");
    } else {
      sb.append(this.RE);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("replyId:");
    if (this.replyId == null) {
      sb.append("null");
    } else {
      sb.append(this.replyId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("replyWriterId:");
    if (this.replyWriterId == null) {
      sb.append("null");
    } else {
      sb.append(this.replyWriterId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("siteId:");
    if (this.siteId == null) {
      sb.append("null");
    } else {
      sb.append(this.siteId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("via:");
    if (this.via == null) {
      sb.append("null");
    } else {
      sb.append(this.via);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("siteType:");
    if (this.siteType == null) {
      sb.append("null");
    } else {
      sb.append(this.siteType);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("siteScreenName:");
    if (this.siteScreenName == null) {
      sb.append("null");
    } else {
      sb.append(this.siteScreenName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("siteCode:");
    sb.append(this.siteCode);
    first = false;
    if (!first) sb.append(", ");
    sb.append("twitterCrawlType:");
    if (this.twitterCrawlType == null) {
      sb.append("null");
    } else {
      sb.append(this.twitterCrawlType);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("writerName:");
    if (this.writerName == null) {
      sb.append("null");
    } else {
      sb.append(this.writerName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("retweetCount:");
    sb.append(this.retweetCount);
    first = false;
    if (!first) sb.append(", ");
    sb.append("followCount:");
    sb.append(this.followCount);
    first = false;
    if (!first) sb.append(", ");
    sb.append("links:");
    if (this.links == null) {
      sb.append("null");
    } else {
      sb.append(this.links);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("siteSubType:");
    if (this.siteSubType == null) {
      sb.append("null");
    } else {
      sb.append(this.siteSubType);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("siteName:");
    if (this.siteName == null) {
      sb.append("null");
    } else {
      sb.append(this.siteName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("picture:");
    if (this.picture == null) {
      sb.append("null");
    } else {
      sb.append(this.picture);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("screenName:");
    if (this.screenName == null) {
      sb.append("null");
    } else {
      sb.append(this.screenName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("siteSubCate:");
    if (this.siteSubCate == null) {
      sb.append("null");
    } else {
      sb.append(this.siteSubCate);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("siteCategory:");
    if (this.siteCategory == null) {
      sb.append("null");
    } else {
      sb.append(this.siteCategory);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("subUrl:");
    if (this.subUrl == null) {
      sb.append("null");
    } else {
      sb.append(this.subUrl);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("charSet:");
    if (this.charSet == null) {
      sb.append("null");
    } else {
      sb.append(this.charSet);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("getDepth:");
    if (this.getDepth == null) {
      sb.append("null");
    } else {
      sb.append(this.getDepth);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("isMetaSearch:");
    sb.append(this.isMetaSearch);
    first = false;
    if (!first) sb.append(", ");
    sb.append("urlId:");
    if (this.urlId == null) {
      sb.append("null");
    } else {
      sb.append(this.urlId);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException();
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bit_vector = new BitSet(1);
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException();
    }
  }

}

