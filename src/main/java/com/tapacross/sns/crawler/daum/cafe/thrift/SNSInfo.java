/**
 * Autogenerated by Thrift Compiler (0.7.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package com.tapacross.sns.crawler.daum.cafe.thrift;

import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class SNSInfo implements org.apache.thrift.TBase<SNSInfo, SNSInfo._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("SNSInfo");

  private static final org.apache.thrift.protocol.TField SITE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("siteId", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField SITE_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("siteType", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField URL_FIELD_DESC = new org.apache.thrift.protocol.TField("url", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField SITE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("siteName", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField FOLLOWER_FIELD_DESC = new org.apache.thrift.protocol.TField("follower", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField FOLLOWING_FIELD_DESC = new org.apache.thrift.protocol.TField("following", org.apache.thrift.protocol.TType.I32, (short)6);
  private static final org.apache.thrift.protocol.TField LISTED_FIELD_DESC = new org.apache.thrift.protocol.TField("listed", org.apache.thrift.protocol.TType.I32, (short)7);
  private static final org.apache.thrift.protocol.TField TWEET_FIELD_DESC = new org.apache.thrift.protocol.TField("tweet", org.apache.thrift.protocol.TType.I32, (short)8);
  private static final org.apache.thrift.protocol.TField PICTURE_FIELD_DESC = new org.apache.thrift.protocol.TField("picture", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField BIO_FIELD_DESC = new org.apache.thrift.protocol.TField("bio", org.apache.thrift.protocol.TType.STRING, (short)10);
  private static final org.apache.thrift.protocol.TField WEB_FIELD_DESC = new org.apache.thrift.protocol.TField("web", org.apache.thrift.protocol.TType.STRING, (short)11);
  private static final org.apache.thrift.protocol.TField LOCATION_FIELD_DESC = new org.apache.thrift.protocol.TField("location", org.apache.thrift.protocol.TType.STRING, (short)12);
  private static final org.apache.thrift.protocol.TField SCREEN_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("screenName", org.apache.thrift.protocol.TType.STRING, (short)13);
  private static final org.apache.thrift.protocol.TField IDS_FIELD_DESC = new org.apache.thrift.protocol.TField("ids", org.apache.thrift.protocol.TType.LIST, (short)14);
  private static final org.apache.thrift.protocol.TField SNS_CONTENT_FIELD_DESC = new org.apache.thrift.protocol.TField("snsContent", org.apache.thrift.protocol.TType.LIST, (short)15);
  private static final org.apache.thrift.protocol.TField FOLLOWER_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("followerList", org.apache.thrift.protocol.TType.STRING, (short)16);
  private static final org.apache.thrift.protocol.TField FOLLOWING_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("followingList", org.apache.thrift.protocol.TType.STRING, (short)17);
  private static final org.apache.thrift.protocol.TField SITE_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("siteCode", org.apache.thrift.protocol.TType.I64, (short)18);
  private static final org.apache.thrift.protocol.TField LAST_UPDATE_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("lastUpdateDate", org.apache.thrift.protocol.TType.STRING, (short)19);
  private static final org.apache.thrift.protocol.TField ADDRESS_CRAWL_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("addressCrawlType", org.apache.thrift.protocol.TType.STRING, (short)20);
  private static final org.apache.thrift.protocol.TField STATUS_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("statusCode", org.apache.thrift.protocol.TType.I32, (short)21);
  private static final org.apache.thrift.protocol.TField SITE_CATEGORY_FIELD_DESC = new org.apache.thrift.protocol.TField("siteCategory", org.apache.thrift.protocol.TType.STRING, (short)22);
  private static final org.apache.thrift.protocol.TField PRIORITY_FIELD_DESC = new org.apache.thrift.protocol.TField("priority", org.apache.thrift.protocol.TType.I32, (short)23);
  private static final org.apache.thrift.protocol.TField IS_VALID_LANG_FIELD_DESC = new org.apache.thrift.protocol.TField("isValidLang", org.apache.thrift.protocol.TType.STRING, (short)24);
  private static final org.apache.thrift.protocol.TField SITE_SUB_CATE_FIELD_DESC = new org.apache.thrift.protocol.TField("siteSubCate", org.apache.thrift.protocol.TType.STRING, (short)25);
  private static final org.apache.thrift.protocol.TField TOKEN_KEY_FIELD_DESC = new org.apache.thrift.protocol.TField("tokenKey", org.apache.thrift.protocol.TType.STRING, (short)26);
  private static final org.apache.thrift.protocol.TField TOKEN_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("tokenType", org.apache.thrift.protocol.TType.STRING, (short)27);

  private String siteId;
  private String siteType;
  private String url;
  private String siteName;
  private int follower;
  private int following;
  private int listed;
  private int tweet;
  private String picture;
  private String bio;
  private String web;
  private String location;
  private String screenName;
  private List<String> ids;
  private List<SNSContent> snsContent;
  private String followerList;
  private String followingList;
  private long siteCode;
  private String lastUpdateDate;
  private String addressCrawlType;
  private int statusCode;
  private String siteCategory;
  private int priority;
  private String isValidLang;
  private String siteSubCate;
  private String tokenKey;
  private String tokenType;

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    SITE_ID((short)1, "siteId"),
    SITE_TYPE((short)2, "siteType"),
    URL((short)3, "url"),
    SITE_NAME((short)4, "siteName"),
    FOLLOWER((short)5, "follower"),
    FOLLOWING((short)6, "following"),
    LISTED((short)7, "listed"),
    TWEET((short)8, "tweet"),
    PICTURE((short)9, "picture"),
    BIO((short)10, "bio"),
    WEB((short)11, "web"),
    LOCATION((short)12, "location"),
    SCREEN_NAME((short)13, "screenName"),
    IDS((short)14, "ids"),
    SNS_CONTENT((short)15, "snsContent"),
    FOLLOWER_LIST((short)16, "followerList"),
    FOLLOWING_LIST((short)17, "followingList"),
    SITE_CODE((short)18, "siteCode"),
    LAST_UPDATE_DATE((short)19, "lastUpdateDate"),
    ADDRESS_CRAWL_TYPE((short)20, "addressCrawlType"),
    STATUS_CODE((short)21, "statusCode"),
    SITE_CATEGORY((short)22, "siteCategory"),
    PRIORITY((short)23, "priority"),
    IS_VALID_LANG((short)24, "isValidLang"),
    SITE_SUB_CATE((short)25, "siteSubCate"),
    TOKEN_KEY((short)26, "tokenKey"),
    TOKEN_TYPE((short)27, "tokenType");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // SITE_ID
          return SITE_ID;
        case 2: // SITE_TYPE
          return SITE_TYPE;
        case 3: // URL
          return URL;
        case 4: // SITE_NAME
          return SITE_NAME;
        case 5: // FOLLOWER
          return FOLLOWER;
        case 6: // FOLLOWING
          return FOLLOWING;
        case 7: // LISTED
          return LISTED;
        case 8: // TWEET
          return TWEET;
        case 9: // PICTURE
          return PICTURE;
        case 10: // BIO
          return BIO;
        case 11: // WEB
          return WEB;
        case 12: // LOCATION
          return LOCATION;
        case 13: // SCREEN_NAME
          return SCREEN_NAME;
        case 14: // IDS
          return IDS;
        case 15: // SNS_CONTENT
          return SNS_CONTENT;
        case 16: // FOLLOWER_LIST
          return FOLLOWER_LIST;
        case 17: // FOLLOWING_LIST
          return FOLLOWING_LIST;
        case 18: // SITE_CODE
          return SITE_CODE;
        case 19: // LAST_UPDATE_DATE
          return LAST_UPDATE_DATE;
        case 20: // ADDRESS_CRAWL_TYPE
          return ADDRESS_CRAWL_TYPE;
        case 21: // STATUS_CODE
          return STATUS_CODE;
        case 22: // SITE_CATEGORY
          return SITE_CATEGORY;
        case 23: // PRIORITY
          return PRIORITY;
        case 24: // IS_VALID_LANG
          return IS_VALID_LANG;
        case 25: // SITE_SUB_CATE
          return SITE_SUB_CATE;
        case 26: // TOKEN_KEY
          return TOKEN_KEY;
        case 27: // TOKEN_TYPE
          return TOKEN_TYPE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __FOLLOWER_ISSET_ID = 0;
  private static final int __FOLLOWING_ISSET_ID = 1;
  private static final int __LISTED_ISSET_ID = 2;
  private static final int __TWEET_ISSET_ID = 3;
  private static final int __SITECODE_ISSET_ID = 4;
  private static final int __STATUSCODE_ISSET_ID = 5;
  private static final int __PRIORITY_ISSET_ID = 6;
  private BitSet __isset_bit_vector = new BitSet(7);

  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.SITE_ID, new org.apache.thrift.meta_data.FieldMetaData("siteId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SITE_TYPE, new org.apache.thrift.meta_data.FieldMetaData("siteType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.URL, new org.apache.thrift.meta_data.FieldMetaData("url", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SITE_NAME, new org.apache.thrift.meta_data.FieldMetaData("siteName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.FOLLOWER, new org.apache.thrift.meta_data.FieldMetaData("follower", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.FOLLOWING, new org.apache.thrift.meta_data.FieldMetaData("following", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.LISTED, new org.apache.thrift.meta_data.FieldMetaData("listed", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.TWEET, new org.apache.thrift.meta_data.FieldMetaData("tweet", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PICTURE, new org.apache.thrift.meta_data.FieldMetaData("picture", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.BIO, new org.apache.thrift.meta_data.FieldMetaData("bio", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.WEB, new org.apache.thrift.meta_data.FieldMetaData("web", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LOCATION, new org.apache.thrift.meta_data.FieldMetaData("location", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SCREEN_NAME, new org.apache.thrift.meta_data.FieldMetaData("screenName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.IDS, new org.apache.thrift.meta_data.FieldMetaData("ids", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.SNS_CONTENT, new org.apache.thrift.meta_data.FieldMetaData("snsContent", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, SNSContent.class))));
    tmpMap.put(_Fields.FOLLOWER_LIST, new org.apache.thrift.meta_data.FieldMetaData("followerList", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.FOLLOWING_LIST, new org.apache.thrift.meta_data.FieldMetaData("followingList", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SITE_CODE, new org.apache.thrift.meta_data.FieldMetaData("siteCode", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.LAST_UPDATE_DATE, new org.apache.thrift.meta_data.FieldMetaData("lastUpdateDate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ADDRESS_CRAWL_TYPE, new org.apache.thrift.meta_data.FieldMetaData("addressCrawlType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.STATUS_CODE, new org.apache.thrift.meta_data.FieldMetaData("statusCode", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.SITE_CATEGORY, new org.apache.thrift.meta_data.FieldMetaData("siteCategory", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PRIORITY, new org.apache.thrift.meta_data.FieldMetaData("priority", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.IS_VALID_LANG, new org.apache.thrift.meta_data.FieldMetaData("isValidLang", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SITE_SUB_CATE, new org.apache.thrift.meta_data.FieldMetaData("siteSubCate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TOKEN_KEY, new org.apache.thrift.meta_data.FieldMetaData("tokenKey", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TOKEN_TYPE, new org.apache.thrift.meta_data.FieldMetaData("tokenType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(SNSInfo.class, metaDataMap);
  }

  public SNSInfo() {
  }

  public SNSInfo(
    String siteId,
    String siteType,
    String url,
    String siteName,
    int follower,
    int following,
    int listed,
    int tweet,
    String picture,
    String bio,
    String web,
    String location,
    String screenName,
    List<String> ids,
    List<SNSContent> snsContent,
    String followerList,
    String followingList,
    long siteCode,
    String lastUpdateDate,
    String addressCrawlType,
    int statusCode,
    String siteCategory,
    int priority,
    String isValidLang,
    String siteSubCate,
    String tokenKey,
    String tokenType)
  {
    this();
    this.siteId = siteId;
    this.siteType = siteType;
    this.url = url;
    this.siteName = siteName;
    this.follower = follower;
    setFollowerIsSet(true);
    this.following = following;
    setFollowingIsSet(true);
    this.listed = listed;
    setListedIsSet(true);
    this.tweet = tweet;
    setTweetIsSet(true);
    this.picture = picture;
    this.bio = bio;
    this.web = web;
    this.location = location;
    this.screenName = screenName;
    this.ids = ids;
    this.snsContent = snsContent;
    this.followerList = followerList;
    this.followingList = followingList;
    this.siteCode = siteCode;
    setSiteCodeIsSet(true);
    this.lastUpdateDate = lastUpdateDate;
    this.addressCrawlType = addressCrawlType;
    this.statusCode = statusCode;
    setStatusCodeIsSet(true);
    this.siteCategory = siteCategory;
    this.priority = priority;
    setPriorityIsSet(true);
    this.isValidLang = isValidLang;
    this.siteSubCate = siteSubCate;
    this.tokenKey = tokenKey;
    this.tokenType = tokenType;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public SNSInfo(SNSInfo other) {
    __isset_bit_vector.clear();
    __isset_bit_vector.or(other.__isset_bit_vector);
    if (other.isSetSiteId()) {
      this.siteId = other.siteId;
    }
    if (other.isSetSiteType()) {
      this.siteType = other.siteType;
    }
    if (other.isSetUrl()) {
      this.url = other.url;
    }
    if (other.isSetSiteName()) {
      this.siteName = other.siteName;
    }
    this.follower = other.follower;
    this.following = other.following;
    this.listed = other.listed;
    this.tweet = other.tweet;
    if (other.isSetPicture()) {
      this.picture = other.picture;
    }
    if (other.isSetBio()) {
      this.bio = other.bio;
    }
    if (other.isSetWeb()) {
      this.web = other.web;
    }
    if (other.isSetLocation()) {
      this.location = other.location;
    }
    if (other.isSetScreenName()) {
      this.screenName = other.screenName;
    }
    if (other.isSetIds()) {
      List<String> __this__ids = new ArrayList<String>();
      for (String other_element : other.ids) {
        __this__ids.add(other_element);
      }
      this.ids = __this__ids;
    }
    if (other.isSetSnsContent()) {
      List<SNSContent> __this__snsContent = new ArrayList<SNSContent>();
      for (SNSContent other_element : other.snsContent) {
        __this__snsContent.add(new SNSContent(other_element));
      }
      this.snsContent = __this__snsContent;
    }
    if (other.isSetFollowerList()) {
      this.followerList = other.followerList;
    }
    if (other.isSetFollowingList()) {
      this.followingList = other.followingList;
    }
    this.siteCode = other.siteCode;
    if (other.isSetLastUpdateDate()) {
      this.lastUpdateDate = other.lastUpdateDate;
    }
    if (other.isSetAddressCrawlType()) {
      this.addressCrawlType = other.addressCrawlType;
    }
    this.statusCode = other.statusCode;
    if (other.isSetSiteCategory()) {
      this.siteCategory = other.siteCategory;
    }
    this.priority = other.priority;
    if (other.isSetIsValidLang()) {
      this.isValidLang = other.isValidLang;
    }
    if (other.isSetSiteSubCate()) {
      this.siteSubCate = other.siteSubCate;
    }
    if (other.isSetTokenKey()) {
      this.tokenKey = other.tokenKey;
    }
    if (other.isSetTokenType()) {
      this.tokenType = other.tokenType;
    }
  }

  public SNSInfo deepCopy() {
    return new SNSInfo(this);
  }

  public void clear() {
    this.siteId = null;
    this.siteType = null;
    this.url = null;
    this.siteName = null;
    setFollowerIsSet(false);
    this.follower = 0;
    setFollowingIsSet(false);
    this.following = 0;
    setListedIsSet(false);
    this.listed = 0;
    setTweetIsSet(false);
    this.tweet = 0;
    this.picture = null;
    this.bio = null;
    this.web = null;
    this.location = null;
    this.screenName = null;
    this.ids = null;
    this.snsContent = null;
    this.followerList = null;
    this.followingList = null;
    setSiteCodeIsSet(false);
    this.siteCode = 0;
    this.lastUpdateDate = null;
    this.addressCrawlType = null;
    setStatusCodeIsSet(false);
    this.statusCode = 0;
    this.siteCategory = null;
    setPriorityIsSet(false);
    this.priority = 0;
    this.isValidLang = null;
    this.siteSubCate = null;
    this.tokenKey = null;
    this.tokenType = null;
  }

  public String getSiteId() {
    return this.siteId;
  }

  public void setSiteId(String siteId) {
    this.siteId = siteId;
  }

  public void unsetSiteId() {
    this.siteId = null;
  }

  /** Returns true if field siteId is set (has been assigned a value) and false otherwise */
  public boolean isSetSiteId() {
    return this.siteId != null;
  }

  public void setSiteIdIsSet(boolean value) {
    if (!value) {
      this.siteId = null;
    }
  }

  public String getSiteType() {
    return this.siteType;
  }

  public void setSiteType(String siteType) {
    this.siteType = siteType;
  }

  public void unsetSiteType() {
    this.siteType = null;
  }

  /** Returns true if field siteType is set (has been assigned a value) and false otherwise */
  public boolean isSetSiteType() {
    return this.siteType != null;
  }

  public void setSiteTypeIsSet(boolean value) {
    if (!value) {
      this.siteType = null;
    }
  }

  public String getUrl() {
    return this.url;
  }

  public void setUrl(String url) {
    this.url = url;
  }

  public void unsetUrl() {
    this.url = null;
  }

  /** Returns true if field url is set (has been assigned a value) and false otherwise */
  public boolean isSetUrl() {
    return this.url != null;
  }

  public void setUrlIsSet(boolean value) {
    if (!value) {
      this.url = null;
    }
  }

  public String getSiteName() {
    return this.siteName;
  }

  public void setSiteName(String siteName) {
    this.siteName = siteName;
  }

  public void unsetSiteName() {
    this.siteName = null;
  }

  /** Returns true if field siteName is set (has been assigned a value) and false otherwise */
  public boolean isSetSiteName() {
    return this.siteName != null;
  }

  public void setSiteNameIsSet(boolean value) {
    if (!value) {
      this.siteName = null;
    }
  }

  public int getFollower() {
    return this.follower;
  }

  public void setFollower(int follower) {
    this.follower = follower;
    setFollowerIsSet(true);
  }

  public void unsetFollower() {
    __isset_bit_vector.clear(__FOLLOWER_ISSET_ID);
  }

  /** Returns true if field follower is set (has been assigned a value) and false otherwise */
  public boolean isSetFollower() {
    return __isset_bit_vector.get(__FOLLOWER_ISSET_ID);
  }

  public void setFollowerIsSet(boolean value) {
    __isset_bit_vector.set(__FOLLOWER_ISSET_ID, value);
  }

  public int getFollowing() {
    return this.following;
  }

  public void setFollowing(int following) {
    this.following = following;
    setFollowingIsSet(true);
  }

  public void unsetFollowing() {
    __isset_bit_vector.clear(__FOLLOWING_ISSET_ID);
  }

  /** Returns true if field following is set (has been assigned a value) and false otherwise */
  public boolean isSetFollowing() {
    return __isset_bit_vector.get(__FOLLOWING_ISSET_ID);
  }

  public void setFollowingIsSet(boolean value) {
    __isset_bit_vector.set(__FOLLOWING_ISSET_ID, value);
  }

  public int getListed() {
    return this.listed;
  }

  public void setListed(int listed) {
    this.listed = listed;
    setListedIsSet(true);
  }

  public void unsetListed() {
    __isset_bit_vector.clear(__LISTED_ISSET_ID);
  }

  /** Returns true if field listed is set (has been assigned a value) and false otherwise */
  public boolean isSetListed() {
    return __isset_bit_vector.get(__LISTED_ISSET_ID);
  }

  public void setListedIsSet(boolean value) {
    __isset_bit_vector.set(__LISTED_ISSET_ID, value);
  }

  public int getTweet() {
    return this.tweet;
  }

  public void setTweet(int tweet) {
    this.tweet = tweet;
    setTweetIsSet(true);
  }

  public void unsetTweet() {
    __isset_bit_vector.clear(__TWEET_ISSET_ID);
  }

  /** Returns true if field tweet is set (has been assigned a value) and false otherwise */
  public boolean isSetTweet() {
    return __isset_bit_vector.get(__TWEET_ISSET_ID);
  }

  public void setTweetIsSet(boolean value) {
    __isset_bit_vector.set(__TWEET_ISSET_ID, value);
  }

  public String getPicture() {
    return this.picture;
  }

  public void setPicture(String picture) {
    this.picture = picture;
  }

  public void unsetPicture() {
    this.picture = null;
  }

  /** Returns true if field picture is set (has been assigned a value) and false otherwise */
  public boolean isSetPicture() {
    return this.picture != null;
  }

  public void setPictureIsSet(boolean value) {
    if (!value) {
      this.picture = null;
    }
  }

  public String getBio() {
    return this.bio;
  }

  public void setBio(String bio) {
    this.bio = bio;
  }

  public void unsetBio() {
    this.bio = null;
  }

  /** Returns true if field bio is set (has been assigned a value) and false otherwise */
  public boolean isSetBio() {
    return this.bio != null;
  }

  public void setBioIsSet(boolean value) {
    if (!value) {
      this.bio = null;
    }
  }

  public String getWeb() {
    return this.web;
  }

  public void setWeb(String web) {
    this.web = web;
  }

  public void unsetWeb() {
    this.web = null;
  }

  /** Returns true if field web is set (has been assigned a value) and false otherwise */
  public boolean isSetWeb() {
    return this.web != null;
  }

  public void setWebIsSet(boolean value) {
    if (!value) {
      this.web = null;
    }
  }

  public String getLocation() {
    return this.location;
  }

  public void setLocation(String location) {
    this.location = location;
  }

  public void unsetLocation() {
    this.location = null;
  }

  /** Returns true if field location is set (has been assigned a value) and false otherwise */
  public boolean isSetLocation() {
    return this.location != null;
  }

  public void setLocationIsSet(boolean value) {
    if (!value) {
      this.location = null;
    }
  }

  public String getScreenName() {
    return this.screenName;
  }

  public void setScreenName(String screenName) {
    this.screenName = screenName;
  }

  public void unsetScreenName() {
    this.screenName = null;
  }

  /** Returns true if field screenName is set (has been assigned a value) and false otherwise */
  public boolean isSetScreenName() {
    return this.screenName != null;
  }

  public void setScreenNameIsSet(boolean value) {
    if (!value) {
      this.screenName = null;
    }
  }

  public int getIdsSize() {
    return (this.ids == null) ? 0 : this.ids.size();
  }

  public java.util.Iterator<String> getIdsIterator() {
    return (this.ids == null) ? null : this.ids.iterator();
  }

  public void addToIds(String elem) {
    if (this.ids == null) {
      this.ids = new ArrayList<String>();
    }
    this.ids.add(elem);
  }

  public List<String> getIds() {
    return this.ids;
  }

  public void setIds(List<String> ids) {
    this.ids = ids;
  }

  public void unsetIds() {
    this.ids = null;
  }

  /** Returns true if field ids is set (has been assigned a value) and false otherwise */
  public boolean isSetIds() {
    return this.ids != null;
  }

  public void setIdsIsSet(boolean value) {
    if (!value) {
      this.ids = null;
    }
  }

  public int getSnsContentSize() {
    return (this.snsContent == null) ? 0 : this.snsContent.size();
  }

  public java.util.Iterator<SNSContent> getSnsContentIterator() {
    return (this.snsContent == null) ? null : this.snsContent.iterator();
  }

  public void addToSnsContent(SNSContent elem) {
    if (this.snsContent == null) {
      this.snsContent = new ArrayList<SNSContent>();
    }
    this.snsContent.add(elem);
  }

  public List<SNSContent> getSnsContent() {
    return this.snsContent;
  }

  public void setSnsContent(List<SNSContent> snsContent) {
    this.snsContent = snsContent;
  }

  public void unsetSnsContent() {
    this.snsContent = null;
  }

  /** Returns true if field snsContent is set (has been assigned a value) and false otherwise */
  public boolean isSetSnsContent() {
    return this.snsContent != null;
  }

  public void setSnsContentIsSet(boolean value) {
    if (!value) {
      this.snsContent = null;
    }
  }

  public String getFollowerList() {
    return this.followerList;
  }

  public void setFollowerList(String followerList) {
    this.followerList = followerList;
  }

  public void unsetFollowerList() {
    this.followerList = null;
  }

  /** Returns true if field followerList is set (has been assigned a value) and false otherwise */
  public boolean isSetFollowerList() {
    return this.followerList != null;
  }

  public void setFollowerListIsSet(boolean value) {
    if (!value) {
      this.followerList = null;
    }
  }

  public String getFollowingList() {
    return this.followingList;
  }

  public void setFollowingList(String followingList) {
    this.followingList = followingList;
  }

  public void unsetFollowingList() {
    this.followingList = null;
  }

  /** Returns true if field followingList is set (has been assigned a value) and false otherwise */
  public boolean isSetFollowingList() {
    return this.followingList != null;
  }

  public void setFollowingListIsSet(boolean value) {
    if (!value) {
      this.followingList = null;
    }
  }

  public long getSiteCode() {
    return this.siteCode;
  }

  public void setSiteCode(long siteCode) {
    this.siteCode = siteCode;
    setSiteCodeIsSet(true);
  }

  public void unsetSiteCode() {
    __isset_bit_vector.clear(__SITECODE_ISSET_ID);
  }

  /** Returns true if field siteCode is set (has been assigned a value) and false otherwise */
  public boolean isSetSiteCode() {
    return __isset_bit_vector.get(__SITECODE_ISSET_ID);
  }

  public void setSiteCodeIsSet(boolean value) {
    __isset_bit_vector.set(__SITECODE_ISSET_ID, value);
  }

  public String getLastUpdateDate() {
    return this.lastUpdateDate;
  }

  public void setLastUpdateDate(String lastUpdateDate) {
    this.lastUpdateDate = lastUpdateDate;
  }

  public void unsetLastUpdateDate() {
    this.lastUpdateDate = null;
  }

  /** Returns true if field lastUpdateDate is set (has been assigned a value) and false otherwise */
  public boolean isSetLastUpdateDate() {
    return this.lastUpdateDate != null;
  }

  public void setLastUpdateDateIsSet(boolean value) {
    if (!value) {
      this.lastUpdateDate = null;
    }
  }

  public String getAddressCrawlType() {
    return this.addressCrawlType;
  }

  public void setAddressCrawlType(String addressCrawlType) {
    this.addressCrawlType = addressCrawlType;
  }

  public void unsetAddressCrawlType() {
    this.addressCrawlType = null;
  }

  /** Returns true if field addressCrawlType is set (has been assigned a value) and false otherwise */
  public boolean isSetAddressCrawlType() {
    return this.addressCrawlType != null;
  }

  public void setAddressCrawlTypeIsSet(boolean value) {
    if (!value) {
      this.addressCrawlType = null;
    }
  }

  public int getStatusCode() {
    return this.statusCode;
  }

  public void setStatusCode(int statusCode) {
    this.statusCode = statusCode;
    setStatusCodeIsSet(true);
  }

  public void unsetStatusCode() {
    __isset_bit_vector.clear(__STATUSCODE_ISSET_ID);
  }

  /** Returns true if field statusCode is set (has been assigned a value) and false otherwise */
  public boolean isSetStatusCode() {
    return __isset_bit_vector.get(__STATUSCODE_ISSET_ID);
  }

  public void setStatusCodeIsSet(boolean value) {
    __isset_bit_vector.set(__STATUSCODE_ISSET_ID, value);
  }

  public String getSiteCategory() {
    return this.siteCategory;
  }

  public void setSiteCategory(String siteCategory) {
    this.siteCategory = siteCategory;
  }

  public void unsetSiteCategory() {
    this.siteCategory = null;
  }

  /** Returns true if field siteCategory is set (has been assigned a value) and false otherwise */
  public boolean isSetSiteCategory() {
    return this.siteCategory != null;
  }

  public void setSiteCategoryIsSet(boolean value) {
    if (!value) {
      this.siteCategory = null;
    }
  }

  public int getPriority() {
    return this.priority;
  }

  public void setPriority(int priority) {
    this.priority = priority;
    setPriorityIsSet(true);
  }

  public void unsetPriority() {
    __isset_bit_vector.clear(__PRIORITY_ISSET_ID);
  }

  /** Returns true if field priority is set (has been assigned a value) and false otherwise */
  public boolean isSetPriority() {
    return __isset_bit_vector.get(__PRIORITY_ISSET_ID);
  }

  public void setPriorityIsSet(boolean value) {
    __isset_bit_vector.set(__PRIORITY_ISSET_ID, value);
  }

  public String getIsValidLang() {
    return this.isValidLang;
  }

  public void setIsValidLang(String isValidLang) {
    this.isValidLang = isValidLang;
  }

  public void unsetIsValidLang() {
    this.isValidLang = null;
  }

  /** Returns true if field isValidLang is set (has been assigned a value) and false otherwise */
  public boolean isSetIsValidLang() {
    return this.isValidLang != null;
  }

  public void setIsValidLangIsSet(boolean value) {
    if (!value) {
      this.isValidLang = null;
    }
  }

  public String getSiteSubCate() {
    return this.siteSubCate;
  }

  public void setSiteSubCate(String siteSubCate) {
    this.siteSubCate = siteSubCate;
  }

  public void unsetSiteSubCate() {
    this.siteSubCate = null;
  }

  /** Returns true if field siteSubCate is set (has been assigned a value) and false otherwise */
  public boolean isSetSiteSubCate() {
    return this.siteSubCate != null;
  }

  public void setSiteSubCateIsSet(boolean value) {
    if (!value) {
      this.siteSubCate = null;
    }
  }

  public String getTokenKey() {
    return this.tokenKey;
  }

  public void setTokenKey(String tokenKey) {
    this.tokenKey = tokenKey;
  }

  public void unsetTokenKey() {
    this.tokenKey = null;
  }

  /** Returns true if field tokenKey is set (has been assigned a value) and false otherwise */
  public boolean isSetTokenKey() {
    return this.tokenKey != null;
  }

  public void setTokenKeyIsSet(boolean value) {
    if (!value) {
      this.tokenKey = null;
    }
  }

  public String getTokenType() {
    return this.tokenType;
  }

  public void setTokenType(String tokenType) {
    this.tokenType = tokenType;
  }

  public void unsetTokenType() {
    this.tokenType = null;
  }

  /** Returns true if field tokenType is set (has been assigned a value) and false otherwise */
  public boolean isSetTokenType() {
    return this.tokenType != null;
  }

  public void setTokenTypeIsSet(boolean value) {
    if (!value) {
      this.tokenType = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case SITE_ID:
      if (value == null) {
        unsetSiteId();
      } else {
        setSiteId((String)value);
      }
      break;

    case SITE_TYPE:
      if (value == null) {
        unsetSiteType();
      } else {
        setSiteType((String)value);
      }
      break;

    case URL:
      if (value == null) {
        unsetUrl();
      } else {
        setUrl((String)value);
      }
      break;

    case SITE_NAME:
      if (value == null) {
        unsetSiteName();
      } else {
        setSiteName((String)value);
      }
      break;

    case FOLLOWER:
      if (value == null) {
        unsetFollower();
      } else {
        setFollower((Integer)value);
      }
      break;

    case FOLLOWING:
      if (value == null) {
        unsetFollowing();
      } else {
        setFollowing((Integer)value);
      }
      break;

    case LISTED:
      if (value == null) {
        unsetListed();
      } else {
        setListed((Integer)value);
      }
      break;

    case TWEET:
      if (value == null) {
        unsetTweet();
      } else {
        setTweet((Integer)value);
      }
      break;

    case PICTURE:
      if (value == null) {
        unsetPicture();
      } else {
        setPicture((String)value);
      }
      break;

    case BIO:
      if (value == null) {
        unsetBio();
      } else {
        setBio((String)value);
      }
      break;

    case WEB:
      if (value == null) {
        unsetWeb();
      } else {
        setWeb((String)value);
      }
      break;

    case LOCATION:
      if (value == null) {
        unsetLocation();
      } else {
        setLocation((String)value);
      }
      break;

    case SCREEN_NAME:
      if (value == null) {
        unsetScreenName();
      } else {
        setScreenName((String)value);
      }
      break;

    case IDS:
      if (value == null) {
        unsetIds();
      } else {
        setIds((List<String>)value);
      }
      break;

    case SNS_CONTENT:
      if (value == null) {
        unsetSnsContent();
      } else {
        setSnsContent((List<SNSContent>)value);
      }
      break;

    case FOLLOWER_LIST:
      if (value == null) {
        unsetFollowerList();
      } else {
        setFollowerList((String)value);
      }
      break;

    case FOLLOWING_LIST:
      if (value == null) {
        unsetFollowingList();
      } else {
        setFollowingList((String)value);
      }
      break;

    case SITE_CODE:
      if (value == null) {
        unsetSiteCode();
      } else {
        setSiteCode((Long)value);
      }
      break;

    case LAST_UPDATE_DATE:
      if (value == null) {
        unsetLastUpdateDate();
      } else {
        setLastUpdateDate((String)value);
      }
      break;

    case ADDRESS_CRAWL_TYPE:
      if (value == null) {
        unsetAddressCrawlType();
      } else {
        setAddressCrawlType((String)value);
      }
      break;

    case STATUS_CODE:
      if (value == null) {
        unsetStatusCode();
      } else {
        setStatusCode((Integer)value);
      }
      break;

    case SITE_CATEGORY:
      if (value == null) {
        unsetSiteCategory();
      } else {
        setSiteCategory((String)value);
      }
      break;

    case PRIORITY:
      if (value == null) {
        unsetPriority();
      } else {
        setPriority((Integer)value);
      }
      break;

    case IS_VALID_LANG:
      if (value == null) {
        unsetIsValidLang();
      } else {
        setIsValidLang((String)value);
      }
      break;

    case SITE_SUB_CATE:
      if (value == null) {
        unsetSiteSubCate();
      } else {
        setSiteSubCate((String)value);
      }
      break;

    case TOKEN_KEY:
      if (value == null) {
        unsetTokenKey();
      } else {
        setTokenKey((String)value);
      }
      break;

    case TOKEN_TYPE:
      if (value == null) {
        unsetTokenType();
      } else {
        setTokenType((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case SITE_ID:
      return getSiteId();

    case SITE_TYPE:
      return getSiteType();

    case URL:
      return getUrl();

    case SITE_NAME:
      return getSiteName();

    case FOLLOWER:
      return Integer.valueOf(getFollower());

    case FOLLOWING:
      return Integer.valueOf(getFollowing());

    case LISTED:
      return Integer.valueOf(getListed());

    case TWEET:
      return Integer.valueOf(getTweet());

    case PICTURE:
      return getPicture();

    case BIO:
      return getBio();

    case WEB:
      return getWeb();

    case LOCATION:
      return getLocation();

    case SCREEN_NAME:
      return getScreenName();

    case IDS:
      return getIds();

    case SNS_CONTENT:
      return getSnsContent();

    case FOLLOWER_LIST:
      return getFollowerList();

    case FOLLOWING_LIST:
      return getFollowingList();

    case SITE_CODE:
      return Long.valueOf(getSiteCode());

    case LAST_UPDATE_DATE:
      return getLastUpdateDate();

    case ADDRESS_CRAWL_TYPE:
      return getAddressCrawlType();

    case STATUS_CODE:
      return Integer.valueOf(getStatusCode());

    case SITE_CATEGORY:
      return getSiteCategory();

    case PRIORITY:
      return Integer.valueOf(getPriority());

    case IS_VALID_LANG:
      return getIsValidLang();

    case SITE_SUB_CATE:
      return getSiteSubCate();

    case TOKEN_KEY:
      return getTokenKey();

    case TOKEN_TYPE:
      return getTokenType();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case SITE_ID:
      return isSetSiteId();
    case SITE_TYPE:
      return isSetSiteType();
    case URL:
      return isSetUrl();
    case SITE_NAME:
      return isSetSiteName();
    case FOLLOWER:
      return isSetFollower();
    case FOLLOWING:
      return isSetFollowing();
    case LISTED:
      return isSetListed();
    case TWEET:
      return isSetTweet();
    case PICTURE:
      return isSetPicture();
    case BIO:
      return isSetBio();
    case WEB:
      return isSetWeb();
    case LOCATION:
      return isSetLocation();
    case SCREEN_NAME:
      return isSetScreenName();
    case IDS:
      return isSetIds();
    case SNS_CONTENT:
      return isSetSnsContent();
    case FOLLOWER_LIST:
      return isSetFollowerList();
    case FOLLOWING_LIST:
      return isSetFollowingList();
    case SITE_CODE:
      return isSetSiteCode();
    case LAST_UPDATE_DATE:
      return isSetLastUpdateDate();
    case ADDRESS_CRAWL_TYPE:
      return isSetAddressCrawlType();
    case STATUS_CODE:
      return isSetStatusCode();
    case SITE_CATEGORY:
      return isSetSiteCategory();
    case PRIORITY:
      return isSetPriority();
    case IS_VALID_LANG:
      return isSetIsValidLang();
    case SITE_SUB_CATE:
      return isSetSiteSubCate();
    case TOKEN_KEY:
      return isSetTokenKey();
    case TOKEN_TYPE:
      return isSetTokenType();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof SNSInfo)
      return this.equals((SNSInfo)that);
    return false;
  }

  public boolean equals(SNSInfo that) {
    if (that == null)
      return false;

    boolean this_present_siteId = true && this.isSetSiteId();
    boolean that_present_siteId = true && that.isSetSiteId();
    if (this_present_siteId || that_present_siteId) {
      if (!(this_present_siteId && that_present_siteId))
        return false;
      if (!this.siteId.equals(that.siteId))
        return false;
    }

    boolean this_present_siteType = true && this.isSetSiteType();
    boolean that_present_siteType = true && that.isSetSiteType();
    if (this_present_siteType || that_present_siteType) {
      if (!(this_present_siteType && that_present_siteType))
        return false;
      if (!this.siteType.equals(that.siteType))
        return false;
    }

    boolean this_present_url = true && this.isSetUrl();
    boolean that_present_url = true && that.isSetUrl();
    if (this_present_url || that_present_url) {
      if (!(this_present_url && that_present_url))
        return false;
      if (!this.url.equals(that.url))
        return false;
    }

    boolean this_present_siteName = true && this.isSetSiteName();
    boolean that_present_siteName = true && that.isSetSiteName();
    if (this_present_siteName || that_present_siteName) {
      if (!(this_present_siteName && that_present_siteName))
        return false;
      if (!this.siteName.equals(that.siteName))
        return false;
    }

    boolean this_present_follower = true;
    boolean that_present_follower = true;
    if (this_present_follower || that_present_follower) {
      if (!(this_present_follower && that_present_follower))
        return false;
      if (this.follower != that.follower)
        return false;
    }

    boolean this_present_following = true;
    boolean that_present_following = true;
    if (this_present_following || that_present_following) {
      if (!(this_present_following && that_present_following))
        return false;
      if (this.following != that.following)
        return false;
    }

    boolean this_present_listed = true;
    boolean that_present_listed = true;
    if (this_present_listed || that_present_listed) {
      if (!(this_present_listed && that_present_listed))
        return false;
      if (this.listed != that.listed)
        return false;
    }

    boolean this_present_tweet = true;
    boolean that_present_tweet = true;
    if (this_present_tweet || that_present_tweet) {
      if (!(this_present_tweet && that_present_tweet))
        return false;
      if (this.tweet != that.tweet)
        return false;
    }

    boolean this_present_picture = true && this.isSetPicture();
    boolean that_present_picture = true && that.isSetPicture();
    if (this_present_picture || that_present_picture) {
      if (!(this_present_picture && that_present_picture))
        return false;
      if (!this.picture.equals(that.picture))
        return false;
    }

    boolean this_present_bio = true && this.isSetBio();
    boolean that_present_bio = true && that.isSetBio();
    if (this_present_bio || that_present_bio) {
      if (!(this_present_bio && that_present_bio))
        return false;
      if (!this.bio.equals(that.bio))
        return false;
    }

    boolean this_present_web = true && this.isSetWeb();
    boolean that_present_web = true && that.isSetWeb();
    if (this_present_web || that_present_web) {
      if (!(this_present_web && that_present_web))
        return false;
      if (!this.web.equals(that.web))
        return false;
    }

    boolean this_present_location = true && this.isSetLocation();
    boolean that_present_location = true && that.isSetLocation();
    if (this_present_location || that_present_location) {
      if (!(this_present_location && that_present_location))
        return false;
      if (!this.location.equals(that.location))
        return false;
    }

    boolean this_present_screenName = true && this.isSetScreenName();
    boolean that_present_screenName = true && that.isSetScreenName();
    if (this_present_screenName || that_present_screenName) {
      if (!(this_present_screenName && that_present_screenName))
        return false;
      if (!this.screenName.equals(that.screenName))
        return false;
    }

    boolean this_present_ids = true && this.isSetIds();
    boolean that_present_ids = true && that.isSetIds();
    if (this_present_ids || that_present_ids) {
      if (!(this_present_ids && that_present_ids))
        return false;
      if (!this.ids.equals(that.ids))
        return false;
    }

    boolean this_present_snsContent = true && this.isSetSnsContent();
    boolean that_present_snsContent = true && that.isSetSnsContent();
    if (this_present_snsContent || that_present_snsContent) {
      if (!(this_present_snsContent && that_present_snsContent))
        return false;
      if (!this.snsContent.equals(that.snsContent))
        return false;
    }

    boolean this_present_followerList = true && this.isSetFollowerList();
    boolean that_present_followerList = true && that.isSetFollowerList();
    if (this_present_followerList || that_present_followerList) {
      if (!(this_present_followerList && that_present_followerList))
        return false;
      if (!this.followerList.equals(that.followerList))
        return false;
    }

    boolean this_present_followingList = true && this.isSetFollowingList();
    boolean that_present_followingList = true && that.isSetFollowingList();
    if (this_present_followingList || that_present_followingList) {
      if (!(this_present_followingList && that_present_followingList))
        return false;
      if (!this.followingList.equals(that.followingList))
        return false;
    }

    boolean this_present_siteCode = true;
    boolean that_present_siteCode = true;
    if (this_present_siteCode || that_present_siteCode) {
      if (!(this_present_siteCode && that_present_siteCode))
        return false;
      if (this.siteCode != that.siteCode)
        return false;
    }

    boolean this_present_lastUpdateDate = true && this.isSetLastUpdateDate();
    boolean that_present_lastUpdateDate = true && that.isSetLastUpdateDate();
    if (this_present_lastUpdateDate || that_present_lastUpdateDate) {
      if (!(this_present_lastUpdateDate && that_present_lastUpdateDate))
        return false;
      if (!this.lastUpdateDate.equals(that.lastUpdateDate))
        return false;
    }

    boolean this_present_addressCrawlType = true && this.isSetAddressCrawlType();
    boolean that_present_addressCrawlType = true && that.isSetAddressCrawlType();
    if (this_present_addressCrawlType || that_present_addressCrawlType) {
      if (!(this_present_addressCrawlType && that_present_addressCrawlType))
        return false;
      if (!this.addressCrawlType.equals(that.addressCrawlType))
        return false;
    }

    boolean this_present_statusCode = true;
    boolean that_present_statusCode = true;
    if (this_present_statusCode || that_present_statusCode) {
      if (!(this_present_statusCode && that_present_statusCode))
        return false;
      if (this.statusCode != that.statusCode)
        return false;
    }

    boolean this_present_siteCategory = true && this.isSetSiteCategory();
    boolean that_present_siteCategory = true && that.isSetSiteCategory();
    if (this_present_siteCategory || that_present_siteCategory) {
      if (!(this_present_siteCategory && that_present_siteCategory))
        return false;
      if (!this.siteCategory.equals(that.siteCategory))
        return false;
    }

    boolean this_present_priority = true;
    boolean that_present_priority = true;
    if (this_present_priority || that_present_priority) {
      if (!(this_present_priority && that_present_priority))
        return false;
      if (this.priority != that.priority)
        return false;
    }

    boolean this_present_isValidLang = true && this.isSetIsValidLang();
    boolean that_present_isValidLang = true && that.isSetIsValidLang();
    if (this_present_isValidLang || that_present_isValidLang) {
      if (!(this_present_isValidLang && that_present_isValidLang))
        return false;
      if (!this.isValidLang.equals(that.isValidLang))
        return false;
    }

    boolean this_present_siteSubCate = true && this.isSetSiteSubCate();
    boolean that_present_siteSubCate = true && that.isSetSiteSubCate();
    if (this_present_siteSubCate || that_present_siteSubCate) {
      if (!(this_present_siteSubCate && that_present_siteSubCate))
        return false;
      if (!this.siteSubCate.equals(that.siteSubCate))
        return false;
    }

    boolean this_present_tokenKey = true && this.isSetTokenKey();
    boolean that_present_tokenKey = true && that.isSetTokenKey();
    if (this_present_tokenKey || that_present_tokenKey) {
      if (!(this_present_tokenKey && that_present_tokenKey))
        return false;
      if (!this.tokenKey.equals(that.tokenKey))
        return false;
    }

    boolean this_present_tokenType = true && this.isSetTokenType();
    boolean that_present_tokenType = true && that.isSetTokenType();
    if (this_present_tokenType || that_present_tokenType) {
      if (!(this_present_tokenType && that_present_tokenType))
        return false;
      if (!this.tokenType.equals(that.tokenType))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(SNSInfo other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    SNSInfo typedOther = (SNSInfo)other;

    lastComparison = Boolean.valueOf(isSetSiteId()).compareTo(typedOther.isSetSiteId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSiteId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.siteId, typedOther.siteId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSiteType()).compareTo(typedOther.isSetSiteType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSiteType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.siteType, typedOther.siteType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUrl()).compareTo(typedOther.isSetUrl());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUrl()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.url, typedOther.url);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSiteName()).compareTo(typedOther.isSetSiteName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSiteName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.siteName, typedOther.siteName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFollower()).compareTo(typedOther.isSetFollower());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFollower()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.follower, typedOther.follower);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFollowing()).compareTo(typedOther.isSetFollowing());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFollowing()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.following, typedOther.following);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetListed()).compareTo(typedOther.isSetListed());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetListed()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.listed, typedOther.listed);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTweet()).compareTo(typedOther.isSetTweet());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTweet()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tweet, typedOther.tweet);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPicture()).compareTo(typedOther.isSetPicture());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPicture()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.picture, typedOther.picture);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBio()).compareTo(typedOther.isSetBio());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBio()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bio, typedOther.bio);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetWeb()).compareTo(typedOther.isSetWeb());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetWeb()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.web, typedOther.web);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLocation()).compareTo(typedOther.isSetLocation());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLocation()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.location, typedOther.location);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetScreenName()).compareTo(typedOther.isSetScreenName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetScreenName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.screenName, typedOther.screenName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIds()).compareTo(typedOther.isSetIds());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIds()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ids, typedOther.ids);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSnsContent()).compareTo(typedOther.isSetSnsContent());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSnsContent()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.snsContent, typedOther.snsContent);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFollowerList()).compareTo(typedOther.isSetFollowerList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFollowerList()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.followerList, typedOther.followerList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFollowingList()).compareTo(typedOther.isSetFollowingList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFollowingList()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.followingList, typedOther.followingList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSiteCode()).compareTo(typedOther.isSetSiteCode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSiteCode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.siteCode, typedOther.siteCode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLastUpdateDate()).compareTo(typedOther.isSetLastUpdateDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLastUpdateDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lastUpdateDate, typedOther.lastUpdateDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAddressCrawlType()).compareTo(typedOther.isSetAddressCrawlType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAddressCrawlType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.addressCrawlType, typedOther.addressCrawlType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStatusCode()).compareTo(typedOther.isSetStatusCode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStatusCode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.statusCode, typedOther.statusCode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSiteCategory()).compareTo(typedOther.isSetSiteCategory());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSiteCategory()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.siteCategory, typedOther.siteCategory);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPriority()).compareTo(typedOther.isSetPriority());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPriority()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.priority, typedOther.priority);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIsValidLang()).compareTo(typedOther.isSetIsValidLang());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsValidLang()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isValidLang, typedOther.isValidLang);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSiteSubCate()).compareTo(typedOther.isSetSiteSubCate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSiteSubCate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.siteSubCate, typedOther.siteSubCate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTokenKey()).compareTo(typedOther.isSetTokenKey());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTokenKey()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tokenKey, typedOther.tokenKey);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTokenType()).compareTo(typedOther.isSetTokenType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTokenType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tokenType, typedOther.tokenType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    org.apache.thrift.protocol.TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == org.apache.thrift.protocol.TType.STOP) { 
        break;
      }
      switch (field.id) {
        case 1: // SITE_ID
          if (field.type == org.apache.thrift.protocol.TType.STRING) {
            this.siteId = iprot.readString();
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 2: // SITE_TYPE
          if (field.type == org.apache.thrift.protocol.TType.STRING) {
            this.siteType = iprot.readString();
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 3: // URL
          if (field.type == org.apache.thrift.protocol.TType.STRING) {
            this.url = iprot.readString();
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 4: // SITE_NAME
          if (field.type == org.apache.thrift.protocol.TType.STRING) {
            this.siteName = iprot.readString();
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 5: // FOLLOWER
          if (field.type == org.apache.thrift.protocol.TType.I32) {
            this.follower = iprot.readI32();
            setFollowerIsSet(true);
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 6: // FOLLOWING
          if (field.type == org.apache.thrift.protocol.TType.I32) {
            this.following = iprot.readI32();
            setFollowingIsSet(true);
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 7: // LISTED
          if (field.type == org.apache.thrift.protocol.TType.I32) {
            this.listed = iprot.readI32();
            setListedIsSet(true);
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 8: // TWEET
          if (field.type == org.apache.thrift.protocol.TType.I32) {
            this.tweet = iprot.readI32();
            setTweetIsSet(true);
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 9: // PICTURE
          if (field.type == org.apache.thrift.protocol.TType.STRING) {
            this.picture = iprot.readString();
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 10: // BIO
          if (field.type == org.apache.thrift.protocol.TType.STRING) {
            this.bio = iprot.readString();
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 11: // WEB
          if (field.type == org.apache.thrift.protocol.TType.STRING) {
            this.web = iprot.readString();
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 12: // LOCATION
          if (field.type == org.apache.thrift.protocol.TType.STRING) {
            this.location = iprot.readString();
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 13: // SCREEN_NAME
          if (field.type == org.apache.thrift.protocol.TType.STRING) {
            this.screenName = iprot.readString();
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 14: // IDS
          if (field.type == org.apache.thrift.protocol.TType.LIST) {
            {
              org.apache.thrift.protocol.TList _list4 = iprot.readListBegin();
              this.ids = new ArrayList<String>(_list4.size);
              for (int _i5 = 0; _i5 < _list4.size; ++_i5)
              {
                String _elem6;
                _elem6 = iprot.readString();
                this.ids.add(_elem6);
              }
              iprot.readListEnd();
            }
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 15: // SNS_CONTENT
          if (field.type == org.apache.thrift.protocol.TType.LIST) {
            {
              org.apache.thrift.protocol.TList _list7 = iprot.readListBegin();
              this.snsContent = new ArrayList<SNSContent>(_list7.size);
              for (int _i8 = 0; _i8 < _list7.size; ++_i8)
              {
                SNSContent _elem9;
                _elem9 = new SNSContent();
                _elem9.read(iprot);
                this.snsContent.add(_elem9);
              }
              iprot.readListEnd();
            }
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 16: // FOLLOWER_LIST
          if (field.type == org.apache.thrift.protocol.TType.STRING) {
            this.followerList = iprot.readString();
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 17: // FOLLOWING_LIST
          if (field.type == org.apache.thrift.protocol.TType.STRING) {
            this.followingList = iprot.readString();
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 18: // SITE_CODE
          if (field.type == org.apache.thrift.protocol.TType.I64) {
            this.siteCode = iprot.readI64();
            setSiteCodeIsSet(true);
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 19: // LAST_UPDATE_DATE
          if (field.type == org.apache.thrift.protocol.TType.STRING) {
            this.lastUpdateDate = iprot.readString();
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 20: // ADDRESS_CRAWL_TYPE
          if (field.type == org.apache.thrift.protocol.TType.STRING) {
            this.addressCrawlType = iprot.readString();
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 21: // STATUS_CODE
          if (field.type == org.apache.thrift.protocol.TType.I32) {
            this.statusCode = iprot.readI32();
            setStatusCodeIsSet(true);
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 22: // SITE_CATEGORY
          if (field.type == org.apache.thrift.protocol.TType.STRING) {
            this.siteCategory = iprot.readString();
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 23: // PRIORITY
          if (field.type == org.apache.thrift.protocol.TType.I32) {
            this.priority = iprot.readI32();
            setPriorityIsSet(true);
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 24: // IS_VALID_LANG
          if (field.type == org.apache.thrift.protocol.TType.STRING) {
            this.isValidLang = iprot.readString();
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 25: // SITE_SUB_CATE
          if (field.type == org.apache.thrift.protocol.TType.STRING) {
            this.siteSubCate = iprot.readString();
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 26: // TOKEN_KEY
          if (field.type == org.apache.thrift.protocol.TType.STRING) {
            this.tokenKey = iprot.readString();
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 27: // TOKEN_TYPE
          if (field.type == org.apache.thrift.protocol.TType.STRING) {
            this.tokenType = iprot.readString();
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();
    validate();
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    if (this.siteId != null) {
      oprot.writeFieldBegin(SITE_ID_FIELD_DESC);
      oprot.writeString(this.siteId);
      oprot.writeFieldEnd();
    }
    if (this.siteType != null) {
      oprot.writeFieldBegin(SITE_TYPE_FIELD_DESC);
      oprot.writeString(this.siteType);
      oprot.writeFieldEnd();
    }
    if (this.url != null) {
      oprot.writeFieldBegin(URL_FIELD_DESC);
      oprot.writeString(this.url);
      oprot.writeFieldEnd();
    }
    if (this.siteName != null) {
      oprot.writeFieldBegin(SITE_NAME_FIELD_DESC);
      oprot.writeString(this.siteName);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldBegin(FOLLOWER_FIELD_DESC);
    oprot.writeI32(this.follower);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(FOLLOWING_FIELD_DESC);
    oprot.writeI32(this.following);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(LISTED_FIELD_DESC);
    oprot.writeI32(this.listed);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(TWEET_FIELD_DESC);
    oprot.writeI32(this.tweet);
    oprot.writeFieldEnd();
    if (this.picture != null) {
      oprot.writeFieldBegin(PICTURE_FIELD_DESC);
      oprot.writeString(this.picture);
      oprot.writeFieldEnd();
    }
    if (this.bio != null) {
      oprot.writeFieldBegin(BIO_FIELD_DESC);
      oprot.writeString(this.bio);
      oprot.writeFieldEnd();
    }
    if (this.web != null) {
      oprot.writeFieldBegin(WEB_FIELD_DESC);
      oprot.writeString(this.web);
      oprot.writeFieldEnd();
    }
    if (this.location != null) {
      oprot.writeFieldBegin(LOCATION_FIELD_DESC);
      oprot.writeString(this.location);
      oprot.writeFieldEnd();
    }
    if (this.screenName != null) {
      oprot.writeFieldBegin(SCREEN_NAME_FIELD_DESC);
      oprot.writeString(this.screenName);
      oprot.writeFieldEnd();
    }
    if (this.ids != null) {
      oprot.writeFieldBegin(IDS_FIELD_DESC);
      {
        oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, this.ids.size()));
        for (String _iter10 : this.ids)
        {
          oprot.writeString(_iter10);
        }
        oprot.writeListEnd();
      }
      oprot.writeFieldEnd();
    }
    if (this.snsContent != null) {
      oprot.writeFieldBegin(SNS_CONTENT_FIELD_DESC);
      {
        oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, this.snsContent.size()));
        for (SNSContent _iter11 : this.snsContent)
        {
          _iter11.write(oprot);
        }
        oprot.writeListEnd();
      }
      oprot.writeFieldEnd();
    }
    if (this.followerList != null) {
      oprot.writeFieldBegin(FOLLOWER_LIST_FIELD_DESC);
      oprot.writeString(this.followerList);
      oprot.writeFieldEnd();
    }
    if (this.followingList != null) {
      oprot.writeFieldBegin(FOLLOWING_LIST_FIELD_DESC);
      oprot.writeString(this.followingList);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldBegin(SITE_CODE_FIELD_DESC);
    oprot.writeI64(this.siteCode);
    oprot.writeFieldEnd();
    if (this.lastUpdateDate != null) {
      oprot.writeFieldBegin(LAST_UPDATE_DATE_FIELD_DESC);
      oprot.writeString(this.lastUpdateDate);
      oprot.writeFieldEnd();
    }
    if (this.addressCrawlType != null) {
      oprot.writeFieldBegin(ADDRESS_CRAWL_TYPE_FIELD_DESC);
      oprot.writeString(this.addressCrawlType);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldBegin(STATUS_CODE_FIELD_DESC);
    oprot.writeI32(this.statusCode);
    oprot.writeFieldEnd();
    if (this.siteCategory != null) {
      oprot.writeFieldBegin(SITE_CATEGORY_FIELD_DESC);
      oprot.writeString(this.siteCategory);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldBegin(PRIORITY_FIELD_DESC);
    oprot.writeI32(this.priority);
    oprot.writeFieldEnd();
    if (this.isValidLang != null) {
      oprot.writeFieldBegin(IS_VALID_LANG_FIELD_DESC);
      oprot.writeString(this.isValidLang);
      oprot.writeFieldEnd();
    }
    if (this.siteSubCate != null) {
      oprot.writeFieldBegin(SITE_SUB_CATE_FIELD_DESC);
      oprot.writeString(this.siteSubCate);
      oprot.writeFieldEnd();
    }
    if (this.tokenKey != null) {
      oprot.writeFieldBegin(TOKEN_KEY_FIELD_DESC);
      oprot.writeString(this.tokenKey);
      oprot.writeFieldEnd();
    }
    if (this.tokenType != null) {
      oprot.writeFieldBegin(TOKEN_TYPE_FIELD_DESC);
      oprot.writeString(this.tokenType);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("SNSInfo(");
    boolean first = true;

    sb.append("siteId:");
    if (this.siteId == null) {
      sb.append("null");
    } else {
      sb.append(this.siteId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("siteType:");
    if (this.siteType == null) {
      sb.append("null");
    } else {
      sb.append(this.siteType);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("url:");
    if (this.url == null) {
      sb.append("null");
    } else {
      sb.append(this.url);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("siteName:");
    if (this.siteName == null) {
      sb.append("null");
    } else {
      sb.append(this.siteName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("follower:");
    sb.append(this.follower);
    first = false;
    if (!first) sb.append(", ");
    sb.append("following:");
    sb.append(this.following);
    first = false;
    if (!first) sb.append(", ");
    sb.append("listed:");
    sb.append(this.listed);
    first = false;
    if (!first) sb.append(", ");
    sb.append("tweet:");
    sb.append(this.tweet);
    first = false;
    if (!first) sb.append(", ");
    sb.append("picture:");
    if (this.picture == null) {
      sb.append("null");
    } else {
      sb.append(this.picture);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("bio:");
    if (this.bio == null) {
      sb.append("null");
    } else {
      sb.append(this.bio);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("web:");
    if (this.web == null) {
      sb.append("null");
    } else {
      sb.append(this.web);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("location:");
    if (this.location == null) {
      sb.append("null");
    } else {
      sb.append(this.location);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("screenName:");
    if (this.screenName == null) {
      sb.append("null");
    } else {
      sb.append(this.screenName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("ids:");
    if (this.ids == null) {
      sb.append("null");
    } else {
      sb.append(this.ids);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("snsContent:");
    if (this.snsContent == null) {
      sb.append("null");
    } else {
      sb.append(this.snsContent);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("followerList:");
    if (this.followerList == null) {
      sb.append("null");
    } else {
      sb.append(this.followerList);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("followingList:");
    if (this.followingList == null) {
      sb.append("null");
    } else {
      sb.append(this.followingList);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("siteCode:");
    sb.append(this.siteCode);
    first = false;
    if (!first) sb.append(", ");
    sb.append("lastUpdateDate:");
    if (this.lastUpdateDate == null) {
      sb.append("null");
    } else {
      sb.append(this.lastUpdateDate);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("addressCrawlType:");
    if (this.addressCrawlType == null) {
      sb.append("null");
    } else {
      sb.append(this.addressCrawlType);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("statusCode:");
    sb.append(this.statusCode);
    first = false;
    if (!first) sb.append(", ");
    sb.append("siteCategory:");
    if (this.siteCategory == null) {
      sb.append("null");
    } else {
      sb.append(this.siteCategory);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("priority:");
    sb.append(this.priority);
    first = false;
    if (!first) sb.append(", ");
    sb.append("isValidLang:");
    if (this.isValidLang == null) {
      sb.append("null");
    } else {
      sb.append(this.isValidLang);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("siteSubCate:");
    if (this.siteSubCate == null) {
      sb.append("null");
    } else {
      sb.append(this.siteSubCate);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("tokenKey:");
    if (this.tokenKey == null) {
      sb.append("null");
    } else {
      sb.append(this.tokenKey);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("tokenType:");
    if (this.tokenType == null) {
      sb.append("null");
    } else {
      sb.append(this.tokenType);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException();
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bit_vector = new BitSet(1);
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException();
    }
  }

}

